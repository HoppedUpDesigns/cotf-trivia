Simply the code I am going to get you below. Refactor the code for efficiency.
Edit the comment box at the top of the code filling in any 
information the comment box needs.
Return to me any and all edited, modified code with your changes merged in with the existing code. Return to me 100% of the
completed code for that file in each step of your instructions. Do not comment out any styles, JavaScript,
functions, types, properties, states, etc in the code that you return to me. I want the entire, 100% complete and functional code. 
This includes not adding comments to the code such 
as `// ... other fields ...,`,
`// ... other imports ...`, 
`// ... existing code ...`, 
`{/* ... */}`, 
`// ... (useEffect to load quiz data)`, 
`// ... (other functions and logic)`, 
`// ... (other context values)`, 
`// ... remaining component code ...`, 
`// ... error handling ...`, 
`// ... remaining code ...`,
`// ...other initial states,`,
`// ...remaining initial states`,
`// ...other states,`,
`// ...useEffect to fetch quiz data,`,
`// ...existing code,`,
`// ...other context values,`,
`// ...remaining context values`,
`// ...existing code...`,
`// ...existing useEffect and other states...`,
`// Handle the error case as appropriate for your app`,
`// ...remaining code...`,
`// ...other parameters`,
`// ...existing useEffects...`,
`// Style definitions (kept as is for brevity)`
`// Styled Components`,
`// ... [styles definitions]`,
`// JSX for rendering the component`,
`// ... [render logic]`
Instead of putting comments as placeholders for the actual code and/or logic 
that goes where the comment is, put in the actual code and/or logic that
goes into that file so that the file works correctly as expected and I don't have
to add ANY code to the file in order for the file to work correctly. I want 
every single line of code that needs to be in the file so that if the project is
compiled using `npm run build`, the project will compile correctly.
This is how I ALWAYS want you to return
any and all code for me when I request you to return code to me. 
Every time, no exceptions EVER. Here is the code: 




Here is my thoughts of what is causing the problem. I have included every file that is dealing with
the quiz Topic in the cotf Quiz App. Questions that need to be answered are in single line comments
below such as the comment `// Is this the correct use of topic and QuizTopic?` Let me know if you need to 
see the entire source code or other code blocks from any or all files in the cotf Quiz App to resolve
these issues. Fix these errors by giving me detailed, step by step instructions. Return any and all edited, modified, fixed files with your changes merged in with the existing code. Return to me 100% of the
completed code for that file in each step of your instructions. Do not comment out any styles, JavaScript,
functions, types, properties, states, etc in the code that you return to me. I want the entire, 100% 
complete, fixed, edited, merged, etc code returned to me in a very detailed, step by step manner.
Here are the issues that I think need to be resolved. Read the comments next to the line of code in
these files in order to determine questions that need to be addressed and fixed:

Line 131 of the /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx file needs to be
traced backwards to fix the error that prints "No topic selected" on the QuizDetailsScreen

Line 33 of the /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx file:
// 'useShuffleQuestions' is declared but its value is never read.ts(6133)
(alias) const useShuffleQuestions: () => void
import useShuffleQuestions`
// DOES useShuffleQuestions NEED TO BE FIXED SO IT CAN BE USED IN THE /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx file

Line 25 of the /Users/jason/Sites/cotf/src/components/QuizTopicsScreen/index.tsx file: 
`'getDocs' is declared but its value is never read.ts(6133)
(alias) function getDocs<AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>): Promise<QuerySnapshot<AppModelType, DbModelType>>
import getDocs`
// DOES getDocs NEED TO BE IMPORTED SO IT CAN BE USED IN THE /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx file


Line 26 of the /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx file:
`import { collection, query, where, orderBy, limit, getDocs, and } from "firebase/firestore";
// `collection' is declared but its value is never read`
// `query' is declared but its value is never read`
// `where' is declared but its value is never read`
//`orderBy' is declared but its value is never read`
// `limit' is declared but its value is never read`
// `getDocs' is declared but its value is never read`
// DO collection, query, where, orderBy, limit, and getDocs NEED TO BE IMPORTED SO THEY CAN BE USED IN THE /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx file

Line 36 of the /Users/jason/Sites/cotf/src/types/index.ts file:
export interface QuizTopic { // Is this the correct use of topic and QuizTopic?
  title: string; // Should this be name instead of title?
  icon: React.ReactNode; // Is this the correct use of icon?
  disabled?: boolean;
}

Line 25 of the /Users/jason/Sites/cotf/src/components/QuizTopicsScreen/index.tsx file:
import { collection, getDocs, doc, getDoc } from "firebase/firestore";
// DO doc and getDoc NEED TO BE IMPORTED SO THEY CAN BE USED IN THE /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx file

Line 29 of the /Users/jason/Sites/cotf/src/components/QuizTopicsScreen/index.tsx file:
import { device } from '../../styles/BreakPoints';
// DOES device NEED TO BE IMPORTED SO IT CAN BE USED IN THE /Users/jason/Sites/cotf/src/components/QuizTopicsScreen/index.tsx file

Line 29 of the /Users/jason/Sites/cotf/src/hooks/useShuffleQuestions.ts file:
export const useShuffleQuestions = () => {
  const { setQuestions, currentScreen, quizTopic } = useQuiz(); // Is this the correct use of quizTopic?

  useEffect(() => {
    const fetchAndShuffleQuestions = async () => {
      const questionsCollectionRef = collection(db, "quizQuestions");
      const q = query(questionsCollectionRef, where("topic", "==", quizTopic)); // Is this the correct use of topic and quizTopic?

      const querySnapshot = await getDocs(q);
      const fetchedQuestions: QuestionTypes[] = querySnapshot.docs.map((doc) => {
        const data = doc.data();
        // Transform your data to fit QuestionTypes
        return {
          questionID: data.questionID,
          question: data.question,
          choices: data.choices,
          correctAnswers: data.correctAnswers,
        };
      });

      setQuestions(shuffleArray(fetchedQuestions));
    };

    if (currentScreen === ScreenTypes.QuizDetailsScreen) {
      fetchAndShuffleQuestions();
    }
  }, [currentScreen, quizTopic, setQuestions]); // Is this the correct use of quizTopic?
};

Line 26 of the /Users/jason/Sites/cotf/src/data/quizTopics.tsx file:
type QuizTopic = { // Is this the correct use of QuizTopic?
  title: string
  icon: ReactNode // Does this need to be icon: React.ReactNode;
  disabled?: boolean
}

Line 22 of the /Users/jason/Sites/cotf/src/data/fetchQuizTopics.ts file:
export const fetchQuizTopics = async (): Promise<QuizTopic[]> => { // Is this the correct use of QuizTopic?
  const quizTopicsCollectionRef = collection(db, "quizTopics"); // Is this the correct use of quizTopics?
  const querySnapshot = await getDocs(quizTopicsCollectionRef);
  return querySnapshot.docs.map(doc => {
    const data = doc.data();
    return {
      title: data.title, // Should this be name instead of title
      icon: data.icon, // Is this the correct use of icon?
      disabled: data.disabled
    } as QuizTopic; // Is this the correct use of QuizTopic?   
  });
};

Line 31 of the /Users/jason/Sites/cotf/src/context/QuizContext.tsx file:
async function fetchQuizData(topic: string) { // Is this the correct use of topic?
  console.log(`Fetching data for topic: ${topic}`); // Is this the correct use of topic?
  const quizRef = doc(db, "quizQuestions", topic); // Is this the correct use of topic?
  const docSnap = await getDoc(quizRef);

  if (docSnap.exists()) {
    console.log(`Fetched data for topic ${topic}:`, docSnap.data()); // Is this the correct use of topic?
    return docSnap.data();
  } else {
    console.error("No such document!", topic);
    return null;
  }
}

Line 98 of the /Users/jason/Sites/cotf/src/context/QuizContext.tsx file:
// THIS SEEMS TO BE THE PROBLEM THIS useEffect(() NEEDS TO BE FIXED
  useEffect(() => {
    if (!quizTopic || typeof quizTopic !== 'string' || quizTopic.trim() === '') { // Is this the correct use of quizTopic?
      console.error("Invalid or no topic provided");
      return;
    }

    console.log(`Attempting to load data for topic: ${quizTopic}`); // Is this the correct use of quizTopic?

    // WORKS
    const loadQuizData = async () => {
      try {
        const quizData = await fetchQuizData(quizTopic); // Is this the correct use of quizTopic?
        if (quizData) {
          console.log(`Quiz data fetched successfully for topic ${quizTopic}`); // Is this the correct use of topic and QuizTopic?
          setQuestions(quizData.questions);
          setQuizDetails({
            totalQuestions: quizData.totalQuestions,
            totalTime: quizData.totalTime,
            selectedQuizTopic: quizTopic, // Is this the correct use of quizTopic?
          });
        } else {
          console.error('Failed to fetch quiz data');
        }
      } catch (error) {
        console.error('Error fetching quiz data:', error);
      }
    };

    loadQuizData();
  }, [quizTopic]); // Is this the correct use of quizTopic?

Line 84 of the /Users/jason/Sites/cotf/src/components/QuizTopicsScreen/index.tsx file:
type QuizTopicWithIcon = QuizTopic & { icon: React.ReactNode }; // Is this the correct use of QuizTopic?

Line 86 of the /Users/jason/Sites/cotf/src/components/QuizTopicsScreen/index.tsx file:
const QuizTopicsScreen: React.FC = () => {
  const { selectQuizTopic, setCurrentScreen, quizDetails } = useQuiz();
  const [quizTopics, setQuizTopics] = useState<QuizTopicWithIcon[]>([]); // Should this be quizTopic instead of quizTopics. Should it be setQuizTopic instead of setQuizTopics?
  const [selectedTopic, setSelectedTopic] = useState<string>(quizDetails.selectedQuizTopic || ''); 

  useEffect(() => {
    const fetchQuizTopics = async () => {
      const collectionRef = collection(db, "quizQuestions");
      const querySnapshot = await getDocs(collectionRef);
      const topics = querySnapshot.docs.map(doc => ({ // Should this be topic instead of topics?
        title: doc.data().title || 'Unnamed Topic', // Should this be name instead of title?
        icon: <img src={AppLogo} alt="Icon" />,
        disabled: false
      }));
      setQuizTopics(topics); // Should this be topic instead of topics?
    };

    fetchQuizTopics();
  }, []);

  const handleTopicSelect = (topic: string) => { // Is this the correct use of topic?
    setSelectedTopic(topic); // Is this the correct use of topic?
    selectQuizTopic(topic); // Is this the correct use of topic?
    setCurrentScreen(ScreenTypes.QuizDetailsScreen);
  };

  return (
    <PageCenter light justifyCenter>
      <CenterCardContainer>
        <LogoContainer>
          <img src={AppLogo} alt="App Logo" />
        </LogoContainer>
        <Heading>WELCOME TO <HighlightedText> COTF TRIVIA</HighlightedText></Heading>
        <DetailText>Select topic below to start your Quiz.</DetailText>
        <SelectButtonContainer>
          {quizTopics.map(({ title, icon, disabled }) => ( // Should this be quizTopic instead of quizTopics. Should it be name instead of title?
            <SelectButton
              key={title} // Should it be name instead of title?
              active={selectedTopic === title} // Should it be name instead of title?
              onClick={() => !disabled && handleTopicSelect(title)} // Should it be name instead of title?
              disabled={!!disabled}
            >
              {icon}
              <SelectButtonText>{title}</SelectButtonText> // Should it be name instead of title?
            </SelectButton>
          ))}
        </SelectButtonContainer>
        <Button
          text="CONTINUE"
          onClick={() => {
            if (!selectedTopic && quizTopics.length > 0) {
              handleTopicSelect(quizTopics[0].title); // Should this be quizTopic instead of quizTopics? Should it be name instead of title?
            }
          }}
          bold
        />
      </CenterCardContainer>
    </PageCenter>
  );
};

This is what is being returned by the console.log:
QuizContext.tsx:98 Invalid or no topic provided // This needs to be checked
(anonymous) @ QuizContext.tsx:98 // The useEffect starting on line 98 of the /Users/jason/Sites/cotf/src/context/QuizContext.tsx file needs to be fixed
QuizContext.tsx:128 Topic selected:  AMORY WARS // Works
QuizContext.tsx:102 Attempting to load data for topic: AMORY WARS // Works
QuizContext.tsx:32 Fetching data for topic: AMORY WARS // Works
QuizContext.tsx:37 Fetched data for topic AMORY WARS: Object // Works
QuizContext.tsx:108 Quiz data fetched successfully for topic AMORY WARS // Works




Problems with the /Users/jason/Sites/cotf/src/components/QuizTopicsScreen/index.tsx file might be caused 
because the name of the <SelectButtonContainer> is configured wrong. The name of the quiz that goes in the 
<SelectButtonContainer> should only be fetched from the `quizTopics` Collection Document in order to get the path
to the icon for the quiz so that it can be displayed on the screen to the left of the name of the quiz. 
So the QuizTopicsScreen displays this line on the screen `Select topic below to start your Quiz.`. 
So there should be 4 <SelectButtonContainer> displayed (one for each of the available quiz Topics. 
  `AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`). The name of the quiz that 
  is displayed on the QuizTopicsScreen inside the <SelectButtonContainer> should be those 4 quiz topics.
The `quizTopics` Collection Document is only fetched so that the icon can be added to the left of the quiz
Topics in the <SelectButtonContainer>. The value of these quiz Topics should not be sent to 
the QuizDetailsScreen. The values of the selected Quiz Topics should be sent to the QuizDetailsScreen
based on the name of the quiz fetched from the Collection Documents named 
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
The Collection Documents named `AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
have a Field named `questionID` that will need to be used on the QuizDetailsScreen.
So the flow of the functionality should go something like this:
1. There are 4 <SelectButtonContainer> that have the name of each quiz that the user can select from
to take a quiz. These <SelectButtonContainer> will have the `title` and `icon` values fetched from
the `quizTopics` Database Collection Document.
2. The only reason that the `quizTopics` Database Collection Document is used on 
QuizTopicsScreen is so that the name of the quiz is fetched and the path to the icon is fetched
3. Each <SelectButtonContainer> should also have a way to store the value of the `name` of 
the quiz fetched from the Database Collection Documents for each of the quizzes available
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
The value of the `title` field from the `quizTopics` Collection Document should not need be sent to
the QuizDetailsScreen because it is not used to fetch the name of the quiz topic that
the QuizDetailsScreen needs and uses. The QuizDetailsScreen needs
to sent the value of the `name` for the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
4. The value of the `name` from these 4 Database Collection Documents needs
to be attached to the <SelectButtonContainer> so that the value of the `name` from the user's
selected quiz Topic clicked on the QuizTopicsScreen is sent to the QuizDetailsScreen based on
the `name` value from the 4 possible quizzes (`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`)
The QuizDetailsScreen will need the `name` fetched from the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
The values from the `questionID` field in the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
needs to be sent to the QuizDetailsScreen so that the value of the `lastQuestionId` can be fetched
from the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
This `lastQuestionId` value will be needed to set the value of the `max` function
5. The QuizDetailsScreen displays a line of text that shows the user the name of the quiz
they selected on the QuizTopicsScreen. The line shown to the user is `Selected Quiz Topic: TOPIC NAME``This `name` 
shown on the screen to the user is fetched from the `name` value for the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
6. The reason the quiz Topic needs to come from the `name` of the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects` is so that
the function that gets the lastQuestionId works. This `lastQuestionId` comes from
the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
7. The `lastQuestionId` is fetched by getting the largest number of the `questionID` in
the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
8. This `lastQuestionId` should be the value of `max` displayed next to the line
on the QuizDetailsScreen that says "Total questions available in the selected quiz: "`max`"
The number value of `max` is the value of the `lastQuestionId` fetched from the user selected quiz based on the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects` that
the user clicked on on the QuizTopicsScreen
9. The input box allows the user to type in a number (and only a number) between 1 and the `max` value
caluculated from the `lastQuestionId` value of the highest value of the `questionID` in the `questionID` Field
fetched from the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
10. The `name` of the quiz sent to the QuestionScreen (goToQuestionScreen) is the `name` value of the user selected quiz topic from one of the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`
11. The QuizTopicsScreen needs to be modified so that the default quiz Topic is "Coheed and Cambria"
so that if the user clicks the "CONTINUE" Button without clicking on one of the quiz Topics, the user will
by default be quizzed on the "Coheed and Cambria" quiz and that default value will be sent
to the QuizDetailsScreen. If the user does click on a quiz Topic, the clicked quiz Topic values are what
will be sent to the QuizDetailsScreen. Remember in the case of the default or the user selected quiz topic,
the QuizDetailsScreen needs the value of the `name` for the selected quiz topic fetched from
the user selected quiz from one or the 4 Database Collection Documents named
`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`

I need you to modify the QuizTopicsScreen to implement the changes I asked for above. I also need you to 
modify the QuizDetailsScreen to implement the changes I asked for above. Also fix these errors in the QuizDetailsScreen: 1. `Argument of type 'Topic | null' is not assignable to parameter of type 'SetStateAction<null>'.
  Type 'Topic' is not assignable to type 'SetStateAction<null>'.
    Type 'Topic' provides no match for the signature '(prevState: null): null'.ts(2345)
const data: Topic | null`, 2. `Property 'title' does not exist on type 'never'.ts(2339)
any` 3. The code `max={10}  {/* Replace with dynamic value */}
Return to me the 100% completed source code for both files as you promised you would do from now on.
Here is the code for both of these files as they currently are:

@file: /Users/jason/Sites/cotf/src/components/QuizTopicsScreen/index.tsx
import React, { useEffect, useState } from "react";
import { useQuiz } from "../../context/QuizContext";
import { collection, getDocs, doc, getDoc } from "firebase/firestore";
import db from "../../firebaseConfig";
import AppLogo from '../../assets/icons/app-logo.svg';
import styled from "styled-components";
import {
  CenterCardContainer,
  HighlightedText,
  LogoContainer,
  PageCenter,
} from '../../styles/Global';
import { ScreenTypes, QuizTopic } from "../../types";
import Button from "../ui/Button";

const Heading = styled.h2`
  font-size: 50px;
  font-weight: 700;
  margin-bottom: 20px;
  text-align: center;
`;

const DetailText = styled.p`
  font-weight: 500;
  font-size: 20px;
  line-height: 29px;
  text-align: center;
`;

const SelectButtonContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  max-width: 60%;
  gap: 30px;
  margin-top: 40px;
  margin-bottom: 45px;
`;

const SelectButton = styled.div<{ isActive: boolean; disabled?: boolean }>`
  background-color: ${({ disabled, theme }) => (disabled ? `${theme.colors.disabledCard}` : `${theme.colors.selectTopicBg}`)};
  border: ${({ isActive, theme }) => (isActive ? `2px solid ${theme.colors.themeColor}` : `1px solid ${theme.colors.disabledButton}`)};
  transition: background-color 0.4s ease-out;
  border-radius: 10px;
  padding: 14px 10px;
  display: flex;
  align-items: center;
  cursor: ${({ disabled }) => (disabled ? "not-allowed" : "pointer")};
`;


const SelectButtonText = styled.span`
  font-size: 18px;
  font-weight: 600;
  margin-left: 10px;
`;

type QuizTopicWithIcon = QuizTopic & { icon: React.ReactNode };

const QuizTopicsScreen: React.FC = () => {
  const { selectQuizTopic, setCurrentScreen, quizDetails } = useQuiz();
  const [quizTopics, setQuizTopics] = useState<QuizTopicWithIcon[]>([]);
  const [selectedTopic, setSelectedTopic] = useState<string>(quizDetails.selectedQuizTopic || ''); 

  useEffect(() => {
    const fetchQuizTopics = async () => {
      const collectionRef = collection(db, "quizQuestions");
      const querySnapshot = await getDocs(collectionRef);
      const topics = querySnapshot.docs.map(doc => ({
        title: doc.data().title || 'Unnamed Topic',
        icon: <img src={AppLogo} alt="Icon" />,
        disabled: false
      }));
      setQuizTopics(topics);
    };

    fetchQuizTopics();
  }, []);

  const handleTopicSelect = (topic: string) => {
    setSelectedTopic(topic);
    selectQuizTopic(topic);
    setCurrentScreen(ScreenTypes.QuizDetailsScreen);
  };

  return (
    <PageCenter light justifyCenter>
      <CenterCardContainer>
        <LogoContainer>
          <img src={AppLogo} alt="App Logo" />
        </LogoContainer>
        <Heading>WELCOME TO <HighlightedText> COTF TRIVIA</HighlightedText></Heading>
        <DetailText>Select topic below to start your Quiz.</DetailText>
        <SelectButtonContainer>
          {quizTopics.map(({ title, icon, disabled }) => (
            <SelectButton
              key={title}
              isActive={selectedTopic === title}
              onClick={() => !disabled && handleTopicSelect(title)}
              disabled={!!disabled}
            >
              {icon}
              <SelectButtonText>{title}</SelectButtonText>
            </SelectButton>
          ))}
        </SelectButtonContainer>
        <Button
          text="CONTINUE"
          onClick={() => {
            if (!selectedTopic && quizTopics.length > 0) {
              handleTopicSelect(quizTopics[0].title);
            }
          }}
          bold
        />
      </CenterCardContainer>
    </PageCenter>
  );
};

export default QuizTopicsScreen;


@file: /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx
import React, { useEffect, useState } from "react";
import { fetchTopicData } from '../../data/QuizQuestions';
import styled from "styled-components";
import { AppLogo, StartIcon } from "../../config/icons";
import { useQuiz } from "../../context/QuizContext";
import {
  CenterCardContainer,
  HighlightedText,
  LogoContainer,
  PageCenter,
} from "../../styles/Global";
import { ScreenTypes } from "../../types";
import Button from "../ui/Button";

const AppTitle = styled.h2`
  font-weight: 700;
  font-size: 32px;
  color: ${({ theme }) => theme.colors.themeColor};
`;

const DetailTextContainer = styled.div`
  font-size: 20px;
  font-weight: 500;
  margin-top: 15px;
  margin-bottom: 40px;
  text-align: center;
  max-width: 500px;
`;

const DetailText = styled.p`
  font-size: 20px;
  font-weight: 500;
  margin-top: 15px;
  line-height: 1.3;
`;

const NumericInput = styled.input`
  margin-left: 10px;
  padding: 5px;
  width: 50px;

  ::-webkit-inner-spin-button,
  ::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  -moz-appearance: textfield;
`;

const ErrorMessage = styled.p`
  color: red;
  margin-top: 10px;
`;

const QuizDetailsScreen = () => {
  const { setCurrentScreen, quizDetails, setUserSelectedQuestions } = useQuiz();
  const [topicData, setTopicData] = useState(null);
  const [userInput, setUserInput] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    const selectedTopic = quizDetails.selectedQuizTopic;
    if (selectedTopic) {
      const fetchAndSetTopicData = async () => {
        const data = await fetchTopicData(selectedTopic);
        setTopicData(data);
      };
      fetchAndSetTopicData();
    }
  }, [quizDetails.selectedQuizTopic]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    const maxQuestions = 10; // Replace with dynamic value if available
    if (!isNaN(Number(value)) && Number(value) >= 1 && Number(value) <= maxQuestions) {
      setUserInput(value);
      setError('');
    } else {
      setError(`You must enter a number between 1 and ${maxQuestions}`);
    }
  };

  const goToQuestionScreen = () => {
    if (userInput) {
      setUserSelectedQuestions(userInput);
      setCurrentScreen(ScreenTypes.QuestionScreen);
    } else {
      setError('Please enter a valid number of questions.');
    }
  };

  return (
    <PageCenter light justifyCenter>
      <CenterCardContainer>
        <LogoContainer>
          <AppLogo />
        </LogoContainer>
        <AppTitle>COTF TRIVIA</AppTitle>
        <DetailTextContainer>
          <DetailText>
            Selected Quiz Topic: <HighlightedText>{topicData?.title || 'No topic selected'}</HighlightedText>
          </DetailText>
          <DetailText>
            Total questions available in the selected quiz: <strong>10</strong> {/* Replace with dynamic value */}
          </DetailText>
          <DetailText>
            How many questions would you like to attempt?
            <NumericInput
              type="number"
              value={userInput}
              onChange={handleInputChange}
              min="1"
              max={10}  {/* Replace with dynamic value */}
            />
            {error && <ErrorMessage>{error}</ErrorMessage>}
          </DetailText>
          <DetailText>
            You will have 10 seconds to answer each question in the quiz
          </DetailText>
          <DetailText>
            To save time, you can skip questions. Skipped questions will show up at the end of the quiz.
          </DetailText>
        </DetailTextContainer>
        <Button
          text="Start"
          icon={<StartIcon />}
          iconPosition="left"
          onClick={goToQuestionScreen}
          bold
        />
      </CenterCardContainer>
    </PageCenter>
  );
};

export default QuizDetailsScreen;

Also, do any changes need to be made to the following files:
@file: /Users/jason/Sites/cotf/src/types/index.ts
@file: /Users/jason/Sites/cotf/src/context/QuizContext.tsx
@file: /Users/jason/Sites/cotf/src/components/QuestionScreen/Question/index.tsx
@file: /Users/jason/Sites/cotf/src/components/ResultScreen/index.tsx
@file: /Users/jason/Sites/cotf/src/components/ResultScreen/ResultOverview/index.tsx
@file: /Users/jason/Sites/cotf/src/components/QuestionScreen/QuizHeader/index.tsx
@file: /Users/jason/Sites/cotf/src/components/QuestionScreen/QuizHeader/Counter/index.tsx
@file: /Users/jason/Sites/cotf/src/data/QuizQuestions/index.ts
@file: /Users/jason/Sites/cotf/src/components/ResultScreen/RightAnswer/index.tsx
@file: /Users/jason/Sites/cotf/src/components/QuestionScreen/Answer/index.tsx
@file: /Users/jason/Sites/cotf/src/components/Main/index.tsx
@file: /Users/jason/Sites/cotf/src/data/fetchQuizTopics.ts
@file: /Users/jason/Sites/cotf/src/hooks/useShuffleQuestions.ts
@file: /Users/jason/Sites/cotf/src/firebaseConfig.js
@file: /Users/jason/Sites/cotf/src/index.tsx
@file: /Users/jason/Sites/cotf/src/App.tsx

If so, give me very detailed, step by step instructions on how I need to modify 
these files. 
Return any and all edited, modified, fixed files with your changes merged in with the existing code. Return to me 100% of the
completed code for that file in each step of your instructions. Do not comment out any styles, JavaScript,
functions, types, properties, states, etc in the code that you return to me. I want the entire, 100% 
complete, fixed, edited, merged, etc code returned to me


Fix these errors from the /Users/jason/Sites/cotf/src/components/QuizDetailsScreen/index.tsx file:
1. `Argument of type 'Topic' is not assignable to parameter of type 'SetStateAction<null>'.
  Type 'Topic' provides no match for the signature '(prevState: null): null'.ts(2345)
const data: Topic' From this code:         const data = await fetchTopicData(selectedTopic);
        if (data) {
          setTopicData(data); // Fix this line`

2. `Property 'lastQuestionID' does not exist on type 'Topic'.ts(2339)
any` From this code:
`if (data) {
          setTopicData(data);
          setMaxQuestions(data.lastQuestionID || 0); // Adjust based on actual field name
        }`

This is the entire code block that has these errors:
`useEffect(() => {
    const selectedTopic = quizDetails.selectedQuizTopic;
    if (selectedTopic) {
      const fetchAndSetTopicData = async () => {
        const data = await fetchTopicData(selectedTopic);
        if (data) {
          setTopicData(data); // Fix this line
          setMaxQuestions(data.lastQuestionID || 0); // Fix this Adjust based on actual field name
        }
      };
      fetchAndSetTopicData();
    }
  }, [quizDetails.selectedQuizTopic]);`




  In this code from the /Users/jason/Sites/cotf/src/services/dataService.js file, `export const fetchTopicDetails = async (topicName) => {
  try {
    // Query the quizQuestions collection where the title matches the topicName
    const q = query(collection(db, "quizQuestions"), where("title", "==", topicName));` 

    The topicName should be fetched from the name of the Database Collection Document from the `quizQuestions` Collection Documents. There are only 4 `quizQuestions` Collection Documents which are named:
    `AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`

    So the `where` in the line `const q = query(collection(db, "quizQuestions"), where("title", "==", topicName));` 
    should be fetched from the names of the Database Collection Documents (`AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects`). And the `topicName` should be the name of these Documents. So I don't
    think "title" should be named "title" because that is from a Document `quizTopics` that no longer exists. The "title" should
    be the name of one of the 4 `quizQuestions` Collection Documents which are named:
    `AMORY WARS', 'Coheed and Cambria', `S.S. Neverender`, and `Side Projects` that the user selected. Any references
    from the Document `quizTopics` should be deleted from any and all code for the cotf Quiz App.

    Here is the existing code for the /Users/jason/Sites/cotf/src/services/dataService.js file. Return to me the entire, completed code for the /Users/jason/Sites/cotf/src/services/dataService.js file as you promised earlier that you would do for code from now on:

    `import { collection, query, where, getDocs } from "firebase/firestore";
import db from "../firebaseConfig";  // Adjust the path as necessary

export const fetchTopicDetails = async (topicName) => {
  try {
    // Query the quizQuestions collection where the title matches the topicName
    const q = query(collection(db, "quizQuestions"), where("title", "==", topicName));
    const querySnapshot = await getDocs(q);

    if (!querySnapshot.empty) {
      const docData = querySnapshot.docs[0].data(); // Assuming the title is unique and only returns one doc

      // Construct and return the details object
      return {
        lastQuestionId: docData.questionID, // Assuming the last question ID is the same as the number of questions
        // ... Add other details as necessary ...
      };
    } else {
      console.error("No such topic in quizQuestions collection!");
      return null;
    }
  } catch (error) {
    console.error("Error fetching topic details:", error);
    return null;
  }
};''



firebase hosting:channel:deploy cotf-trivia-4644c.web.app







Now the QuizDetailsScreen is working correctly for most components except for what I am now going to describe. 
But this part of the QuizDetailsScreen is NOT working as expected:
1. When the user types a number in the input box that is not a valid number (i.e. a number less than
1 or greater than the total questions), the error message `You must enter a number between 1 and {total questions}` is displayed. This is what should happen.
2. But once the error message is displayed, the user can't got back to the input box to type in
a valid number. The invalid number they first typed in to the input box is still displayed and the user
can't delete this number so that they can enter a valid number.
3. So what should happen is if the user types in an invalid number and the error message is displayed,
the invalid number that the user just entered into the input box should be cleared and the user should
have the ability to re-type a valid number into the input box.
4. Assuming the user has entered a valid number between 1 and the {total questions} available from
the selected quiz topic, the user should be able to click the "Start" Button and they will then be sent to
the QuestionScreen to start their quiz. This works assuming the user types in a valid number the first
time they enter a number into the input box.
5. Once the user enters that valid number, they are sent to the QuestionScreen. This is working as expected.
6. But once the user clicks the "Start" Button and is sent to the QuestionScreen, the QuestionScreen
is not working the way it needs to in order for the user to be asked their requested number of quiz questions.

Here is what is happening once the user lands on the QuestionScreen:
1. The Counter component at the top, left of the QuestionScreen reads "01//0NaN"
What should be displayed in this Counter component is `01/{number of user selected questions}. So for example if the user enters the number 20 in the input box out a possible 100 total questions, the Counter
component should read "01/20"`
2. The Timer component at the top, right of the QuestionScreen displays a time of "0:10" at all times, no matter how many questions the user requested to be asked by entering a number in the input box on the
QuizDetailsScreen. What should be displayed for this Timer component is "{number of minutes}:{number of seconds}". Using the example I just gave you for the Counter component, the user has requested to be quizzed on 20 questions out of a possible 100 questions. So the Timer component should read "03:20". This is calculated by the formula 10 seconds for every question requested by the user. The user requested to be quizzed on 20 questions. So the user will have 10 seconds multiplied by 20 questions which is 200 seconds which will then be converted to this format "minutes:seconds". So for 200 seconds converted to "minutes:seconds", the Timer componenet will
display "03:20"
3. Since the Timer is set to "0:10", the user is only given 10 seconds to finish the quiz so that when the
10 seconds is over, the user is sent to the ResultOverviewScreen
4. The first question for the quiz from the selected quiz topic is correctly displayed on the QuestionScreen. However, the user is unable to click on one of the question choices and therefore is unable to go to the "Next" question. The user is also unable to "Skip" the question as well
So all of these problems need to be addressed and fixed.
Here is what the console of the Web Developer tools prints on when the user is on the QuestionScreen:
1. userSelectedQuestions: Not Set
2. timer: -1
3. endTime: Not Set
4. result: Not Set or Empty
5. currentScreen: 3
6. quizDetails: 
{totalQuestions: undefined, totalTime: undefined, selectedQuizTopic: 'Coheed and Cambria', lastQuestionId: 0}
lastQuestionId
: 
0
selectedQuizTopic
: 
"Coheed and Cambria"
totalQuestions
: 
undefined
totalTime
: 
undefined
[[Prototype]]
: 
Object

The questions are being fetched and sent to the QuestionScreen correctly because I
can see the array of all the questions available for that quiz in the console of the Web Developer tools.
But the problems mentioned above need to be fixed. 
So the `lastQuestionId` on the QuestionScreen may
need to be addressed because the value sent to the QuestionScreen is l`astQuestionId: 0`. 
The total questions value sent to the QuestionScreen needs to be addressed because the value sent to the QuestionScreen is `totalQuestions: undefined`. 
The total time value sent to the QuestionScreen needs to be addressed because the value sent to the QuestionScreen is `totalTime: undefined`.
The timer value sent to the QuestionScreen needs to be addressed because the value sent to the QuestionScreen is `timer: -1`.
The end time value sent to the QuestionScreen needs to be addressed because the value sent to the QuestionScreen is `endTime: Not Set`.
The result value sent to the QuestionScreen needs to be addressed because the value sent to the QuestionScreen is `result: Not Set or Empty`.
I don't know if the currentScreen value sent to the QuestionScreen needs to be addressed because the value sent to the QuestionScreen is `currentScreen: 3`. I don't know what the value of `currentScreen: 3` means.

Now I have these errors on the QuizContext file:
`Type '{ currentScreen: ScreenTypes.SplashScreen; setCurrentScreen: () => void; quizTopic: string; questions: never[]; setQuestions: () => void; result: never[]; setResult: () => void; timer: number; setTimer: () => void; ... 6 more ...; quizDetails: { ...; }; }' is missing the following properties from type 'QuizContextTypes': endtime, setQuizTopicts(2739)
const defaultContextValue: QuizContextTypes` and
`Property 'endtime' is missing in type '{ currentScreen: ScreenTypes; setCurrentScreen: React.Dispatch<React.SetStateAction<ScreenTypes>>; quizTopic: string; setQuizTopic: React.Dispatch<React.SetStateAction<...>>; ... 12 more ...; activeQuestion: number; }' but required in type 'QuizContextTypes'.ts(2741)
index.ts(58, 3): 'endtime' is declared here.`








src/components/QuestionScreen/index.tsx
  Line 86:27:  'setShowResultModal' is assigned a value but never used  @typescript-eslint/no-unused-vars
  Line 91:5:   'quizDetails' is assigned a value but never used         @typescript-eslint/no-unused-vars

src/components/QuizTopicsScreen/index.tsx
  Line 79:46:  'quizDetails' is assigned a value but never used  @typescript-eslint/no-unused-vars

src/hooks/useTimer.ts
  Line 25:11:  'QuizDetails' is defined but never used  @typescript-eslint/no-unused-vars


  This code from the QuizContext file is still not working correctly:
  `useEffect(() => {
    if (!quizTopic || typeof quizTopic !== 'string' || quizTopic.trim() === '') {
      console.error("Invalid or no topic provided");
      return;
    }`

    and
    `const loadQuizData = async () => {
      try {
        const quizData = await fetchQuizData(quizTopic);
        if (quizData) {
          setQuestions(quizData.questions);
          setQuizDetails({
            totalQuestions: quizData.totalQuestions,
            totalTime: quizData.totalQuestions * 10, // Assuming each question takes 10 seconds
            selectedQuizTopic: quizTopic,
            lastQuestionId: quizData.lastQuestionId || 0,
          });
          setUserSelectedQuestions(quizData.totalQuestions.toString());
        } else {
          console.error('Failed to fetch quiz data');
        }
      } catch (error) {
        console.error('Error fetching quiz data:', error);
      }
    };`

    I also get these errors:
    `TypeError: Cannot read properties of undefined (reading '0')
    react-dom.production.min.js:189 TypeError: Cannot read properties of undefined (reading '0')
    at gm (index.tsx:103:27)
    at ks (react-dom.production.min.js:167:137)
    at kl (react-dom.production.min.js:290:337)
    at wu (react-dom.production.min.js:280:389)
    at vu (react-dom.production.min.js:280:320)
    at yu (react-dom.production.min.js:280:180)
    at su (react-dom.production.min.js:271:88)
    at uu (react-dom.production.min.js:273:300)
    at Bi (react-dom.production.min.js:127:105)
    at react-dom.production.min.js:267:273`

    and these:
    `Uncaught TypeError: Cannot read properties of undefined (reading '0')
    at gm (index.tsx:103:27)
    at ks (react-dom.production.min.js:167:137)
    at kl (react-dom.production.min.js:290:337)
    at wu (react-dom.production.min.js:280:389)
    at vu (react-dom.production.min.js:280:320)
    at yu (react-dom.production.min.js:280:180)
    at su (react-dom.production.min.js:271:88)
    at uu (react-dom.production.min.js:273:300)
    at Bi (react-dom.production.min.js:127:105)
    at react-dom.production.min.js:267:273`