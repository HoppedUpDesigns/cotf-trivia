@file: PROJECT-ROOT-FOLDER/package.json
{"name":"COTF-Trivia","version":"0.1.0","private":true,"dependencies":{"@testing-library/jest-dom":"^5.16.5","@testing-library/react":"^13.4.0","@testing-library/user-event":"^13.5.0","@types/jest":"^27.5.2","@types/node":"^16.18.12","@types/react":"^18.0.28","@types/react-dom":"^18.0.11","firebase":"^10.7.1","firebase-admin":"^12.0.0","prismjs":"^1.29.0","react":"^18.2.0","react-dom":"^18.2.0","react-scripts":"5.0.1","styled-components":"^5.3.6","typescript":"^4.9.5","web-vitals":"^2.1.4"},"scripts":{"start":"react-scripts start","build":"react-scripts build","test":"react-scripts test","eject":"react-scripts eject"},"eslintConfig":{"extends":["react-app","react-app/jest"]},"browserslist":{"production":[">0.2%","not dead","not op_mini all"],"development":["last 1 chrome version","last 1 firefox version","last 1 safari version"]},"devDependencies":{"@types/prismjs":"^1.26.0","@types/styled-components":"^5.1.26"}}
@file: PROJECT-ROOT-FOLDER/firebase.json
{"hosting":{"public":"build","ignore":["firebase.json","**/.*","**/node_modules/**"],"rewrites":[{"source":"**","destination":"/index.html"}]}}
@file: PROJECT-ROOT-FOLDER/tsconfig.json
{"compilerOptions":{"target":"es5","lib":["dom","dom.iterable","esnext"],"allowJs":true,"skipLibCheck":true,"esModuleInterop":true,"allowSyntheticDefaultImports":true,"strict":true,"forceConsistentCasingInFileNames":true,"noFallthroughCasesInSwitch":true,"module":"esnext","moduleResolution":"node","resolveJsonModule":true,"isolatedModules":true,"noEmit":true,"jsx":"react-jsx"},"include":["src"]}
@file: PROJECT-ROOT-FOLDER/src/App.tsx
import{useState}from'react';import{ThemeProvider}from'styled-components';import Main from'./components/Main';import ToggleTheme from'./components/ui/ToggleTheme';import QuizProvider from'./context/QuizContext';import{GlobalStyles}from'./styles/Global';import{themes}from'./styles/Theme';function App(){const[currentTheme,setCurrentTheme]=useState(()=>{const savedTheme=localStorage.getItem('theme');return savedTheme||'light'});const toggleTheme=(e:React.ChangeEvent<HTMLInputElement>)=>{const{checked}=e.target;setCurrentTheme(checked?'dark':'light');localStorage.setItem('theme',checked?'dark':'light')}const theme=currentTheme==='light'?themes.light:themes.dark;return(<ThemeProvider theme={theme}><GlobalStyles /><QuizProvider><ToggleTheme
          onChange={toggleTheme}
          currentTheme={currentTheme}
          checked={currentTheme === 'dark'}
          id="toggleTheme"
          value="theme"
        /><Main/></QuizProvider></ThemeProvider>
  )
}
export default App
@file: PROJECT-ROOT-FOLDER/src/index.tsx
import React from'react';import ReactDOM from'react-dom/client';import App from'./App';import reportWebVitals from'./reportWebVitals';const root=ReactDOM.createRoot(document.getElementById('root')as HTMLElement);root.render(<React.StrictMode><App /></React.StrictMode>
)
reportWebVitals()
@file: PROJECT-ROOT-FOLDER/src/firebaseConfig.js
import e from"firebase/compat/app";import"firebase/compat/firestore";let firebaseConfig={apiKey:"60829957132",authDomain:"cotf-trivia-4644c.firebaseapp.com",projectId:"cotf-trivia-4644c",storageBucket:"cotf-trivia-4644c.appspot.com",messagingSenderId:"60829957132",appId:"1:60829957132:web:98c50e9c5a0d6439914229",measurementId:"G-YJPTMZCJX3"},firebaseApp=e.initializeApp(firebaseConfig);export default firebaseApp;export const firestore=e.firestore();
@file: PROJECT-ROOT-FOLDER/src/components/Main/index.tsx
import{useEffect}from'react';import{useQuiz}from'../../context/QuizContext';import{ScreenTypes}from'../../types';import QuestionScreen from'../QuestionScreen';import QuizDetailsScreen from'../QuizDetailsScreen';import QuizTopicsScreen from'../QuizTopicsScreen';import ResultScreen from'../ResultScreen';import SplashScreen from'../SplashScreen';function Main(){const{currentScreen,setCurrentScreen}=useQuiz();useEffect(()=>{setTimeout(()=>{setCurrentScreen(ScreenTypes.QuizTopicsScreen)},1000)},[setCurrentScreen]);const screenComponents={[ScreenTypes.SplashScreen]:<SplashScreen />,[ScreenTypes.QuizTopicsScreen]:<QuizTopicsScreen />,[ScreenTypes.QuizDetailsScreen]:<QuizDetailsScreen />,[ScreenTypes.QuestionScreen]:<QuestionScreen />,[ScreenTypes.ResultScreen]:<ResultScreen />};const ComponentToRender=screenComponents[currentScreen]||<SplashScreen />;return<>{ComponentToRender}</>
}
@file: PROJECT-ROOT-FOLDER/src/types/index.ts
import{Dispatch,SetStateAction}from'react';import{Question}from'../data/QuizQuestions';export enum ScreenTypes{SplashScreen,QuizTopicsScreen,QuizDetailsScreen,QuestionScreen,ResultScreen}export interface QuestionTypes extends Question{skipped? :boolean}export interface Result extends Question{selectedAnswer:string[];isMatch:boolean skipped? :boolean}export typeQuizContextTypes={currentScreen:ScreenTypes setCurrentScreen:Dispatch<SetStateAction<ScreenTypes>>quizTopic:string selectQuizTopic:(type:string)=>void questions:QuestionTypes[]setQuestions:Dispatch<SetStateAction<any[]>>result:Result[]setResult:Dispatch<SetStateAction<any[]>>timer:number setTimer:Dispatch<SetStateAction<number>>endTime:number setEndTime:(type:number)=>void quizDetails:{totalQuestions:number totalTime:number selectedQuizTopic:string}};
@file: PROJECT-ROOT-FOLDER/src/hooks/useTimer.ts
import{Dispatch,SetStateAction,useEffect}from'react';interface QuizDetails{totalTime:number}const useTimer=(timer:number,quizDetails:QuizDetails,setEndTime:(time:number)=>void,setTimer:Dispatch<SetStateAction<number>>,setShowTimerModal:(time:boolean)=>void,showResultModal:boolean)=>{useEffect(()=>{if(timer<=0){const timeTaken=quizDetails.totalTime;setEndTime(timeTaken);setShowTimerModal(true);setTimer(0)}},[timer,quizDetails.totalTime,setEndTime,setShowTimerModal,setTimer]);useEffect(()=>{if(!showResultModal){const countTimer=setTimeout(()=>{setTimer((prevTimer)=>prevTimer-1)},1000);return()=>clearTimeout(countTimer)}},[timer,setTimer])}export default useTimer;
@file: PROJECT-ROOT-FOLDER/src/hooks/useShuffleQuestions.ts
import{useEffect}from'react';import{useQuiz}from'../context/QuizContext';import{ScreenTypes}from'../types';import{shuffleArray}from'../utils/helpers';export const useShuffleQuestions=()=>{const{setQuestions,currentScreen,questions}=useQuiz();useEffect(()=>{if(currentScreen===ScreenTypes.QuizDetailsScreen){setQuestions(shuffleArray(questions))}},[currentScreen])}export default useShuffleQuestions;
@file: PROJECT-ROOT-FOLDER/src/hooks/index.ts
import useShuffleQuestions from './useShuffleQuestions'
import useTimer from './useTimer'
export { useShuffleQuestions, useTimer }
@file: PROJECT-ROOT-FOLDER/src/utils/helpers.ts
export const addLeadingZero=(number:number)=>{if(number>9){return number}else{return'0'+number}}export function formatTime(time:number){const minutes=Math.floor(time/60);const seconds=time%60;return`${minutes}:${seconds.toString().padStart(2,'0')}`}export const convertSeconds=(seconds:number):string=>{const hours=Math.floor(seconds/3600);const minutes=Math.floor((seconds%3600)/60);const remainingSeconds=seconds%60;const hourString=hours>0?`${hours} hour${hours>1?'s':''}`:'';const minuteString=minutes>0?`${minutes} minute${minutes>1?'s':''}`:'';const secondString=remainingSeconds>0?`${remainingSeconds} second${remainingSeconds>1?'s':''}`:'';if(hours>0){return`${hourString} : ${minuteString||'0 minute'} ${;secondString&&`: ${secondString}`}`}else if(!hours&&minutes>0){return`${minuteString} ${secondString&&`: ${secondString}`}`}return secondString}export const refreshPage=():void=>{window.location.reload()}export const shuffleArray=<T>(array:T[]):T[]=>{const shuffledArray=[...array];for(let i=shuffledArray.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[shuffledArray[i],shuffledArray[j]]=[shuffledArray[j],shuffledArray[i]]}return shuffledArray}
@file: PROJECT-ROOT-FOLDER/src/context/QuizContext.tsx
import{ReactNode,createContext,useContext,useEffect,useState}from'react';import{quiz}from'../data/QuizQuestions';import{QuizContextTypes,Result,ScreenTypes}from'../types';const initialState:QuizContextTypes={currentScreen:ScreenTypes.SplashScreen,setCurrentScreen:()=>{},quizTopic:'Coheed and Cambria',selectQuizTopic:()=>{},questions:[],setQuestions:()=>{},result:[],setResult:()=>{},timer:15,setTimer:()=>{},endTime:0,setEndTime:()=>{},quizDetails:{totalQuestions:0,totalTime:0,selectedQuizTopic:'Coheed and Cambria'}};export const QuizContext=createContext<QuizContextTypes>(initialState);export function useQuiz(){return useContext(QuizContext)}typeQuizProviderProps={children:ReactNode};const QuizProvider=({children}:QuizProviderProps)=>{const[timer,setTimer]=useState<number>(initialState.timer);const[endTime,setEndTime]=useState<number>(initialState.endTime);const[quizTopic,setQuizTopic]=useState<string>(initialState.quizTopic);const[result,setResult]=useState<Result[]>(initialState.result);const[currentScreen,setCurrentScreen]=useState<ScreenTypes>(initialState.currentScreen);const[questions,setQuestions]=useState(quiz[initialState.quizTopic].questions);const{questions:quizQuestions,totalQuestions,totalTime}=quiz[quizTopic];const selectQuizTopic=(topic:string)=>{setQuizTopic(topic)}useEffect(()=>{setTimer(totalTime);setQuestions(quizQuestions)},[quizTopic]);const quizDetails={totalQuestions,totalTime,selectedQuizTopic:quizTopic};const quizContextValue:QuizContextTypes={currentScreen,setCurrentScreen,quizTopic,selectQuizTopic,questions,setQuestions,result,setResult,quizDetails,timer,setTimer,endTime,setEndTime};return<QuizContext.Provider value={quizContextValue}>{children}</QuizContext.Provider>
}
export default QuizProvider ;
@file: PROJECT-ROOT-FOLDER/src/data/quizTopics.tsx
import{ReactNode}from'react';import{ReactComponentas Coheed}from'../assets/icons/app-logo.svg';typeQuizTopic={title:string icon:ReactNode disabled? :boolean};export const quizTopics:QuizTopic[]=[{title:'Coheed and Cambria',icon:<Coheed />},{title:'AMORY WARS',icon:<Coheed />},{title:'Side Projects',icon:<Coheed />},{title:'S.S. Neverender',icon:<Coheed />}];
@file: PROJECT-ROOT-FOLDER/src/data/QuizQuestions/amory.json
[{"questionID":1,"question":"{Which of these inhabitants of Heaven's Fence are NOT catalogued?","choices":["Men","The Narrows","The Mage","The Prise"],"type":"MCQs","correctAnswers":["The Narrows"]},{"questionID":2,"question":"{What is the name of Dr. Sirius Amory's wife?","choices":["Mirriam","Meri","Mandy","Martha"],"type":"MCQs","correctAnswers":["Meri"]},{"questionID":3,"question":"{What are the names of Coheed and Cambria's twins?","choices":["Mike and Melinda","Claudio and Josephine","Leonard and Holly","Matthew and Maria"],"type":"MCQs","correctAnswers":["Matthew and Maria"]},{"questionID":4,"question":"{How did Coheed kill his youngest children?","choices":["Poisoned Them","Chocked Them","Shot Them","Drowned Them"],"type":"MCQs","correctAnswers":["Poisoned Them"]},{"questionID":5,"question":"{How did Coheed kill his oldest child?","choices":["Bullet To The Head","Hammer Blow To The Head","Burned Her To Eeath","Drowned Her"],"type":"MCQs","correctAnswers":["Hammer Blow To The Head"]},{"questionID":6,"question":"{What is the name of Josephine's boyfriend?","choices":["Johnny","Cecil","Patrick","Travis"],"type":"MCQs","correctAnswers":["Patrick"]},{"questionID":7,"question":"{What is the name of Claudio's girlfriend?","choices":["Newo","Sara","Penny","Rachel"],"type":"MCQs","correctAnswers":["Newo"]},{"questionID":8,"question":"{What is the name of the religious text that outlines the structure and destiny of Heaven's Fence?","choices":["The Creation of the Worlds","The Prophecies of Heaven's Fence","God's Design","Ghansgraad"],"type":"MCQs","correctAnswers":["Ghansgraad"]},{"questionID":9,"question":"{What is the name of the uncatalogued inhabitant that Claudio meets in Si-Revody?","choices":["Victor","Sizer","Cecil","Patrick"],"type":"MCQs","correctAnswers":["Cecil"]},{"questionID":10,"question":"{What is the name of the only Admiral in the United Red Army?","choices":["Mayo Deftinwolf","Covent Marth","Michael Todd","Vielar Crom"],"type":"MCQs","correctAnswers":["Vielar Crom"]},{"questionID":11,"question":"{Who is the leader of the rebellion against Wilhelm Ryan?","choices":["Mariah Antillarea","Cecil B. Deville","Inferno","Vielar Crom"],"type":"MCQs","correctAnswers":["Mariah Antillarea"]},{"questionID":12,"question":"{What is another name for the prophecy of The Crowing?","choices":["Son of Three","Guardians","God's Warrior","Ghansgraad"],"type":"MCQs","correctAnswers":["Son of Three"]},{"questionID":13,"question":"{What is the name of the camp Claudio was forced to work in on Shylos X?","choices":["Crystal Lake","Si-Revody ","Apity Prime","Paris: Earth"],"type":"MCQs","correctAnswers":["Si-Revody "]},{"questionID":14,"question":"{What is the name of the mysterious energy being that guides Sirius Amory?","choices":["The Prize Fighter Inferno","Sirius Amory","The All-Mother","The Ghost of Wilhelm Ryan"],"type":"MCQs","correctAnswers":["The All-Mother"]},{"questionID":15,"question":"{What is the name of Coheed and Cambria's home planet?","choices":["Hetricus","Apity Prime","Cobalt and Calcium","Star IV"],"type":"MCQs","correctAnswers":["Hetricus"]},{"questionID":16,"question":"{What is the name of the gang that attacked Josephine?","choices":["Jersey City Devils","Jersey City Angels","Jersey City Demons","Jersey City Priests"],"type":"MCQs","correctAnswers":["Jersey City Devils"]},{"questionID":17,"question":"{What is the name of the character who is a key figure in 'The Unheavenly Creatures' narrative?","choices":["Creature","Vaxis","Gutter","Senorita Erminia"],"type":"MCQs","correctAnswers":["Vaxis"]},{"questionID":18,"question":"{In the false memory that Inferno implanted in Cambria, what was her occupation?","choices":["Lawyer","Nurse","Shop Owner","Professor"],"type":"MCQs","correctAnswers":["Nurse"]},{"questionID":19,"question":"{Where did Mayo Deftinwolf discard Sizer's body?","choices":["House Atlantic","Donar","Grail Arbor","Godder Damm"],"type":"MCQs","correctAnswers":["Godder Damm"]},{"questionID":20,"question":"{What is the name of Inferno's spaceship?","choices":["Sizer","Chase","The Dark Sentencer","Grail Arbor"],"type":"MCQs","correctAnswers":["Grail Arbor"]},{"questionID":21,"question":"{On which planet was Mariah killed?","choices":["Kalline","Shylos X","Paris:Earth","Dil-Ariuth IX"],"type":"MCQs","correctAnswers":["Paris:Earth"]},{"questionID":22,"question":"{What is the name of the spacecraft that Sirius Amory uses to reach the Keywork in 'The Afterman: Ascension'?","choices":["The Dark Sentencer","The Willing Well","The Vaxis","The Meriwell"],"type":"MCQs","correctAnswers":["The Meriwell"]},{"questionID":23,"question":"{What is the name of the city that Wilhelm Ryan released the new and improved dragonfiles on?","choices":["Bendelesh","Valley's Hill","Sinosure","Kalline"],"type":"MCQs","correctAnswers":["Kalline"]},{"questionID":24,"question":"{What is the Dark Sentencer?","choices":["Spaceship","Nickname for Mayo Deftinwolf","Prison Planet","A Weapon"],"type":"MCQs","correctAnswers":["Prison Planet"]},{"questionID":25,"question":"{What is the name of the home planet of The Narrows?","choices":["Hilmgore","Javan III","Donar","Howling Earth"],"type":"MCQs","correctAnswers":["Hilmgore"]},{"questionID":26,"question":"{What is the The Camper Velorium?","choices":["A Weapon","A Spaceship","A Religious Artifact","A Secret Organization"],"type":"MCQs","correctAnswers":["A Spaceship"]},{"questionID":27,"question":"{What is the name of Vaxis' mother?","choices":["Ambellina","Nia Worn","Meri Amory","Ruetama Galadoline"],"type":"MCQs","correctAnswers":["Nia Worn"]},{"questionID":28,"question":"{Who is the leader of the Liars Club?","choices":["Vaxis","Candelaria","HOSS","Nostrand Crane"],"type":"MCQs","correctAnswers":["Candelaria"]},{"questionID":29,"question":"{What is the Keywork?","choices":["A Weapon","A Celestial Event","A Spaceship","Interconnecting Beams of Energy"],"type":"MCQs","correctAnswers":["Interconnecting Beams of Energy"]},{"questionID":30,"question":"{What is the name of Ryder's ex-girlfriend?","choices":["Ambellina","Mariah","Meriwell","Erica"],"type":"MCQs","correctAnswers":["Erica"]},{"questionID":31,"question":"{In The Amory Wars, what is the name of the collection of 78 planets and seven stars held in place by interconnecting beams of energy?","choices":["Heaven's Fence","Heavenly Collection","Keywork","Magical Nexus"],"type":"MCQs","correctAnswers":["Heaven's Fence"]},{"questionID":32,"question":"{Who is the Supreme Tri-Mage?","choices":["Claudio Kilgannon","The Crowing","Wilhelm Ryan","Creature"],"type":"MCQs","correctAnswers":["Wilhelm Ryan"]},{"questionID":33,"question":"{What was the first graphic series related to the Amory Wars published in 2004?","choices":["The Amory Wars: Good Apollo, I'm Burning Star IV","The Second Stage Turbine Blade Ultimate Edition","The Bag.On.Line. Adventures: The Second Stage Turbine Blade","Evil Ink’s The Amory Wars"],"type":"MCQs","correctAnswers":["The Bag.On.Line. Adventures: The Second Stage Turbine Blade"]},{"questionID":34,"question":"{Who co-wrote the novel included in the deluxe edition of 'Year of the Black Rainbow'?","choices":["Wes Abbott","Christopher Shy","Peter David","Claudio Sanchez"],"type":"MCQs","correctAnswers":["Peter David"]},{"questionID":35,"question":"{What is the Great Crash?","choices":["Cosmological Event","Spacecraft","A Great Battle","Weapon"],"type":"MCQs","correctAnswers":["Cosmological Event"]},{"questionID":36,"question":"{What are the Unheavenly Creatures?","choices":["A Gang","K.B.I","The Prise","Star System"],"type":"MCQs","correctAnswers":["A Gang"]},{"questionID":37,"question":"{What is the name of a mythical monster with a centipede-like body?","choices":["The Narrows","Keneyto","Scolorustia","Crosif"],"type":"MCQs","correctAnswers":["Scolorustia"]},{"questionID":38,"question":"{What was the name given to Cambria, Coheed, and Inferno?","choices":["K.B.I.","Red Army","Sinstar","The Prise"],"type":"MCQs","correctAnswers":["K.B.I."]},{"questionID":39,"question":"{How many sectors are there in Heaven's Fence?","choices":["4","12","11","10"],"type":"MCQs","correctAnswers":["12"]},{"questionID":40,"question":"{On December 2, 2012, who announced he would be producing a film adaptation of The Amory Wars?","choices":["Peter David","Christopher Nolan","Dwayne Johnson","Mark Wahlberg"],"type":"MCQs","correctAnswers":["Mark Wahlberg"]}]
@file: PROJECT-ROOT-FOLDER/src/components/QuizTopicsScreen/index.tsx
import styled from'styled-components';import{AppLogo}from'../../config/icons';import{useQuiz}from'../../context/QuizContext';import{quizTopics}from'../../data/quizTopics';import{device}from'../../styles/BreakPoints';import{CenterCardContainer,HighlightedText,LogoContainer,PageCenter}from'../../styles/Global';import{ScreenTypes}from'../../types';import Button from'../ui/Button';const Heading=styled.h2`
  font-size: 50px;
  font-weight: 700;
  margin-bottom: 20px;
  text-align: center;
`;const DetailText=styled.p`
  font-weight: 500;
  font-size: 20px;
  line-height: 29px;
  text-align: center;
`;const SelectButtonContainer=styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  max-width: 60%;
  gap: 30px;
  margin-top: 40px;
  margin-bottom: 45px;
  @media ${device.md} {
    row-gap: 20px;
    column-gap: 20px;
    max-width: 100%;
  }
`;interface SelectButtonProps{active:boolean disabled? :boolean}const SelectButton=styled.div<SelectButtonProps>`
  background-color: ${({disabled,theme})=>disabled?`${theme.colors.disabledCard}`:`${theme.colors.selectTopicBg}`};
  border: ${({active,theme})=>active?`2px solid ${theme.colors.themeColor}`:`1px solid ${theme.colors.disabledButton}`};
  transition: background-color 0.4s ease-out;
  border-radius: 10px;
  padding: 14px 10px;
  display: flex;
  align-items: center;
  cursor: ${({disabled})=>(disabled?'not-allowed':'pointer')};
  @media ${device.md} {
    padding: 10px;
    tap-highlight-color: transparent;
    -webkit-tap-highlight-color: transparent;
  }
`;const SelectButtonText=styled.span`
  font-size: 18px;
  font-weight: 600;
  margin-left: 10px;
  @media ${device.md} {
    font-size: 16px;
    font-weight: 500;
  }
`;const QuizTopicsScreen:React.FC=()=>{const{quizTopic,selectQuizTopic,setCurrentScreen}=useQuiz();const goToQuizDetailsScreen=()=>{setCurrentScreen(ScreenTypes.QuizDetailsScreen)}return(<PageCenter light justifyCenter><CenterCardContainer><LogoContainer><AppLogo /></LogoContainer>
        <Heading>
          WELCOME TO <HighlightedText> COTF TRIVIA</HighlightedText></Heading><DetailText>Select topic below to start your Quiz.</DetailText>
        <SelectButtonContainer>
          {quizTopics.map(({ title, icon, disabled }) => (
            <SelectButton
              key={title}
              active={quizTopic === title}
              onClick={() => !disabled && selectQuizTopic(title)}
              disabled={disabled}
            >
              {icon}
              <SelectButtonText>{title}</SelectButtonText></SelectButton>);)}</SelectButtonContainer>
        <Button text="CONTINUE" onClick={goToQuizDetailsScreen} bold /></CenterCardContainer></PageCenter>
  )
}
export default QuizTopicsScreen ;
@file: PROJECT-ROOT-FOLDER/src/components/QuizDetailsScreen/index.tsx
import{useEffect,useState}from"react";import{doc,getDoc}from"firebase/firestore";import{getFirestore}from"firebase/firestore";import firebaseApp from"../../firebaseConfig";import styled from"styled-components";import{AppLogo,StartIcon}from"../../config/icons";import{useQuiz}from"../../context/QuizContext";import{useShuffleQuestions}from"../../hooks";import{CenterCardContainer,HighlightedText,LogoContainer,PageCenter}from"../../styles/Global";import{ScreenTypes}from"../../types";import{convertSeconds}from"../../utils/helpers";import Button from"../ui/Button";const AppTitle=styled.h2`
  font-weight: 700;
  font-size: 32px;
  color: ${({theme})=>theme.colors.themeColor};
`;const DetailTextContainer=styled.div`
  font-size: 20px;
  font-weight: 500;
  margin-top: 15px;
  margin-bottom: 40px;
  text-align: center;
  max-width: 500px;
`;const DetailText=styled.p`
  font-size: 20px;
  font-weight: 500;
  margin-top: 15px;
  line-height: 1.3;
`;const db=getFirestore(firebaseApp);const QuizDetailsScreen=()=>{const{setCurrentScreen,quizDetails}=useQuiz();const{selectedQuizTopic,totalQuestions,totalTime}=quizDetails;const[lastAmoryQuestionId,setLastAmoryQuestionId]=useState(0);const[lastCoheedQuestionId,setLastCoheedQuestionId]=useState(0);const[lastNeverenderQuestionId,setLastNeverenderQuestionId]=useState(0);const[lastSideProjectsQuestionId,setLastSideProjectsQuestionId]=useState(0);async function getLastAmoryQuestionId(){const docRef=doc(db,"quizQuestions","AMORY WARS");const docSnap=await getDoc(docRef);if(docSnap.exists()){const lastQuestionId=docSnap.data().questionID;return lastQuestionId}return 0}async function getLastCoheedQuestionId(){const docRef=doc(db,"quizQuestions","Coheed and Cambria");const docSnap=await getDoc(docRef);if(docSnap.exists()){const lastQuestionId=docSnap.data().questionID;return lastQuestionId}return 0}async function getLastNeverenderQuestionId(){const docRef=doc(db,"quizQuestions","S.S. Neverender");const docSnap=await getDoc(docRef);if(docSnap.exists()){const lastQuestionId=docSnap.data().questionID;return lastQuestionId}return 0}async function getLastSideProjectsQuestionId(){const docRef=doc(db,"quizQuestions","Side Projects");const docSnap=await getDoc(docRef);if(docSnap.exists()){const lastQuestionId=docSnap.data().questionID;return lastQuestionId}return 0}useEffect(()=>{async function fetchLastQuestionIds(){const amoryId=await getLastAmoryQuestionId();setLastAmoryQuestionId(amoryId);const coheedId=await getLastCoheedQuestionId();setLastCoheedQuestionId(coheedId);const neverenderId=await getLastNeverenderQuestionId();setLastNeverenderQuestionId(neverenderId);const sideProjectsId=await getLastSideProjectsQuestionId();setLastSideProjectsQuestionId(sideProjectsId)}fetchLastQuestionIds()},[]);const goToQuestionScreen=()=>{setCurrentScreen(ScreenTypes.QuestionScreen)};useShuffleQuestions();const getTopicQuestionCount=()=>{switch(selectedQuizTopic){case'AMORY WARS':return lastAmoryQuestionId;case'Coheed and Cambria':return lastCoheedQuestionId;case'S.S. Neverender':return lastNeverenderQuestionId;case'Side Projects':return lastSideProjectsQuestionId;default:return 0;}}return(<PageCenter light justifyCenter><CenterCardContainer><LogoContainer><AppLogo /></LogoContainer>
        <AppTitle>COTF TRIVIA</AppTitle><DetailTextContainer><DetailText>Selected Quiz Topic:<HighlightedText>{selectedQuizTopic}</HighlightedText>
          </DetailText><DetailText>Total questions available in the selected quiz:{' '}<HighlightedText>{getTopicQuestionCount()}</HighlightedText>
          </DetailText><DetailText>You will have 10seconds to answer each question in the quiz</DetailText>
          <DetailText>
            To save time, you can skip questions. Skipped questions will show up at the
            end of the quiz.
          </DetailText></DetailTextContainer><Button text="Start"icon={<StartIcon/>}iconPosition="left"onClick={goToQuestionScreen}bold/></CenterCardContainer></PageCenter>
  )
}
export default QuizDetailsScreen
@file: PROJECT-ROOT-FOLDER/src/components/QuestionScreen/QuizHeader/Counter/index.tsx
import{FC}from'react';import styled from'styled-components';import{TimerIcon}from'../../../../config/icons';import{Flex}from'../../../../styles/Global';import{device}from'../../../../styles/BreakPoints';const TimerStyle=styled.span`
  min-width: 60px;
  font-size: clamp(16px, 5vw, 24px);
  font-weight: 500;
  margin-left: 8px;
  color: ${({theme})=>theme.colors.themeColor};
  @media ${device.md} {
    margin-left: 5px;
    min-width: 55px;
  }
`;interface CounterProps{time:string}const Counter:FC<CounterProps>=({time})=>{return(<Flex center><TimerIcon /><TimerStyle>{time}</TimerStyle>
    </Flex>)}export default Counter;
@file: PROJECT-ROOT-FOLDER/src/components/QuestionScreen/QuizHeader/index.tsx
import{FC,useEffect,useState}from"react";import styled from"styled-components";import{AppLogo,CheckIcon,Previous,Next,TimerIcon}from"../../config/icons";import{useQuiz}from"../../context/QuizContext";import{useTimer}from"../../hooks";import{device}from"../../styles/BreakPoints";import{PageCenter}from"../../styles/Global";import{ScreenTypes}from"../../types";import Button from"../ui/Button";import ModalWrapper from"../ui/ModalWrapper";import Question from"./Question";import QuizHeader from"./QuizHeader";const QuizContainer=styled.div<{ selectedAnswer: boolean }>`
  width: 900px;
  min-height: 500px;
  background: ${({theme})=>theme.colors.cardBackground};
  border-radius: 4px;
  padding: 30px 60px 80px 60px;
  margin-bottom: 70px;
  position: relative;
  @media ${device.md} {
    width: 100%;
    padding: 15px 15px 80px 15px;
  }
  button {
    span {
      svg {
        path {
          fill: ${({selectedAnswer,theme})=>selectedAnswer?`${theme.colors.buttonText}`:`${theme.colors.darkGray}`};
        }
      }
    }
  }
`;const LogoContainer=styled.div`
  margin-top: 50px;
  margin-bottom: 50px;
  @media ${device.md} {
    margin-top: 10px;
    margin-bottom: 20px;
    svg {
      width: 185px;
      height: 80px;
    }
  }
`;const ButtonWrapper=styled.div`
  position: absolute;
  right: 60px;
  bottom: 30px;
  display: flex;
  gap: 20px;
  @media ${device.sm} {
    justify-content: flex-end;
    width: 90%;
    right: 15px;
  }
`;const QuestionScreen:FC=()=>{const[activeQuestion,setActiveQuestion]=useState<number>(0);const[selectedAnswer,setSelectedAnswer]=useState<string[]>([]);const[showTimerModal,setShowTimerModal]=useState<boolean>(false);const[showResultModal,setShowResultModal]=useState<boolean>(false);const{questions,setQuestions,quizDetails,result,setResult,setCurrentScreen,timer,setTimer,setEndTime}=useQuiz();const currentQuestion=questions[activeQuestion];const{question,type,choices,image,correctAnswers}=currentQuestion;const onClickNext=()=>{const isMatch:boolean=selectedAnswer.length===correctAnswers.length&&selectedAnswer.every((answer)=>correctAnswers.includes(answer));setResult([...result,{...currentQuestion,selectedAnswer,isMatch}]);if(activeQuestion!==questions.length-1){setActiveQuestion((prev)=>prev+1)}else{const timeTaken=quizDetails.totalTime-timer;setEndTime(timeTaken);setShowResultModal(true)}setSelectedAnswer([])};const handleAnswerSelection=(e:React.ChangeEvent<HTMLInputElement>)=>{const{name,checked}=e.target;if(type==="MAQs"){if(selectedAnswer.includes(name)){setSelectedAnswer((prevSelectedAnswer)=>prevSelectedAnswer.filter((element)=>element!==name))}else{setSelectedAnswer((prevSelectedAnswer)=>[...prevSelectedAnswer,name])}}if(type==="MCQs"||type==="boolean"){if(checked){setSelectedAnswer([name])}}};const onClickPrevious=()=>{if(activeQuestion>0){setActiveQuestion(activeQuestion-1)}};const handleSkipQuestion=()=>{const filterQuestion=questions.filter((item)=>item.question!==currentQuestion.question);setQuestions([...filterQuestion,{...currentQuestion,skipped:true}]);setSelectedAnswer([])};const handleModal=()=>{setCurrentScreen(ScreenTypes.ResultScreen);document.body.style.overflow="auto"};useEffect(()=>{if(showTimerModal||showResultModal){document.body.style.overflow="hidden"}},[showTimerModal,showResultModal]);useTimer(timer,quizDetails,setEndTime,setTimer,setShowTimerModal,showResultModal);return(<PageCenter><LogoContainer><AppLogo/></LogoContainer><QuizContainerselectedAnswer={selectedAnswer.length>0}><QuizHeader
          activeQuestion={activeQuestion}
          totalQuestions={quizDetails.totalQuestions}
          timer={timer}
          skipped={currentQuestion?.skipped}
        /><Question question={question}image={image}choices={choices}type={type}handleAnswerSelection={handleAnswerSelection}selectedAnswer={selectedAnswer}/><ButtonWrapper><Button text={"Previous"}onClick={onClickPrevious}icon={<Previous/>}iconPosition="left"disabled={activeQuestion===0}/>{!currentQuestion?.skipped&&(<Button text="Skip"onClick={handleSkipQuestion}outline/>)}<Button text={activeQuestion===questions.length-1?"Finish":"Next"}onClick={onClickNext}icon={<Next/>}iconPosition="right"disabled={selectedAnswer.length===0}/></ButtonWrapper></QuizContainer>
      {/*timer or finish quiz modal*/}
      {(showTimerModal || showResultModal) && (
        <ModalWrapper
          title={showResultModal ? "Done!" : "Your time is up!"}
          subtitle={`You have attempted ${result.length} questions in total.`}
          onClick={handleModal}
          icon={showResultModal ? <CheckIcon /> : <TimerIcon/>};buttonTitle="SHOW RESULT";/>
      )}
    </PageCenter>)};export default QuestionScreen;
@file: PROJECT-ROOT-FOLDER/src/components/QuestionScreen/Question/index.tsx
import{FC}from'react';import styled from'styled-components';import{device}from'../../../styles/BreakPoints';import Answer from'../Answer';import QuizImage from'../../ui/QuizImage';const QuestionContainer=styled.div`
  margin-top: 30px;
  margin-bottom: 40px;
  max-width: 88%;
  @media ${device.sm} {
    max-width: 100%;
  }
`;const AnswersContainer=styled.div`
  max-width: 78%;
  @media ${device.sm} {
    max-width: 100%;
  }
`;const QuestionStyle=styled.h2`
  font-size: clamp(18px, 4vw, 28px);
  font-weight: 500;
  margin-bottom: 25px;
  color: ${({theme})=>theme.colors.primaryText};
  line-height: 1.3;
`;interface QuestionTypes{question:string image? :string type:string choices:string[];selectedAnswer:string[];handleAnswerSelection:(e:React.ChangeEvent<HTMLInputElement>,index:number)=>void}const Question:FC<QuestionTypes>=({question,image,type,choices,selectedAnswer,handleAnswerSelection})=>{return(<QuestionContainer><QuestionStyle>{question}</QuestionStyle>
      {/*ifquestion contains an image*/}
      {image && <QuizImage image={image} />}<AnswersContainer>{choices.map((choice,index)=>(<Answer
            choice={choice}
            index={index}
            key={index}
            onChange={(e) =>handleAnswerSelection(e,index)}type={type}selectedAnswer={selectedAnswer}/>))}</AnswersContainer>
    </QuestionContainer>)};export default Question;
@file: PROJECT-ROOT-FOLDER/src/components/QuestionScreen/Answer/index.tsx
import{FC}from'react';import styled,{css}from'styled-components';import{device}from'../../../styles/BreakPoints';const AnswerStyle=styled.div<{ highlightAnswer: boolean }>`
  font-size: clamp(18px, 4vw, 16px);
  color: ${({theme})=>theme.colors.secondaryText};
  font-weight: 400;
  border: 1px solid
    ${({highlightAnswer,theme})=>highlightAnswer?`${theme.colors.themeColor}`:`${theme.colors.border}`};
  background-color: ${({highlightAnswer,theme})=>highlightAnswer?`${theme.colors.selectedAnswer}`:`${theme.colors.answerBg}`};
  border-radius: 16px;
  margin-top: clamp(13px, calc(10px + 6 * ((100vw - 600px) / 1320)), 16px);
  cursor: pointer;
  ${({highlightAnswer})=>highlightAnswer&&css`
      transition: border 0.2s ease-in;
    `}
  @media ${device.md} {
    font-weight: 500;
  }
  input {
    visibility: hidden;
    margin: 0;
  }
`;const AnswerLabel=styled.label`
  padding: 18px;
  display: flex;
  cursor: pointer;
  @media ${device.md} {
    padding: 14px;
  }
`;const ChoiceLabel=styled.span``;interface AnswerProps{index:number choice:string type:string selectedAnswer:string[];onChange:(e:React.ChangeEvent<HTMLInputElement>)=>void}const Answer:FC<AnswerProps>=({onChange,index,choice,type,selectedAnswer})=>{const label=String.fromCharCode(65+index);return(<AnswerStylekey={index}highlightAnswer={selectedAnswer.includes(choice)}><AnswerLabel><ChoiceLabel>{label}.</ChoiceLabel>
        <input
          name={choice}
          // radio is for checked one option and checkbox is for checked multiple options
          type={type === 'MAQs' ? 'checkbox' : 'radio'}
          checked={selectedAnswer.includes(choice)}
          onChange={onChange}
        />{choice}</AnswerLabel>
    </AnswerStyle>)}export default Answer;
@file: PROJECT-ROOT-FOLDER/src/components/QuestionScreen/index.tsx
import{FC,useEffect,useState}from"react";import styled from"styled-components";import{AppLogo,CheckIcon,Previous,Next,TimerIcon}from"../../config/icons";import{useQuiz}from"../../context/QuizContext";import{useTimer}from"../../hooks";import{device}from"../../styles/BreakPoints";import{PageCenter}from"../../styles/Global";import{ScreenTypes}from"../../types";import Button from"../ui/Button";import ModalWrapper from"../ui/ModalWrapper";import Question from"./Question";import QuizHeader from"./QuizHeader";const QuizContainer=styled.div<{ selectedAnswer: boolean }>`
  width: 900px;
  min-height: 500px;
  background: ${({theme})=>theme.colors.cardBackground};
  border-radius: 4px;
  padding: 30px 60px 80px 60px;
  margin-bottom: 70px;
  position: relative;
  @media ${device.md} {
    width: 100%;
    padding: 15px 15px 80px 15px;
  }
  button {
    span {
      svg {
        path {
          fill: ${({selectedAnswer,theme})=>selectedAnswer?`${theme.colors.buttonText}`:`${theme.colors.darkGray}`};
        }
      }
    }
  }
`;const LogoContainer=styled.div`
  margin-top: 50px;
  margin-bottom: 50px;
  @media ${device.md} {
    margin-top: 10px;
    margin-bottom: 20px;
    svg {
      width: 185px;
      height: 80px;
    }
  }
`;const ButtonWrapper=styled.div`
  position: absolute;
  right: 60px;
  bottom: 30px;
  display: flex;
  gap: 20px;
  @media ${device.sm} {
    justify-content: flex-end;
    width: 90%;
    right: 15px;
  }
`;const QuestionScreen:FC=()=>{const[activeQuestion,setActiveQuestion]=useState<number>(0);const[selectedAnswer,setSelectedAnswer]=useState<string[]>([]);const[showTimerModal,setShowTimerModal]=useState<boolean>(false);const[showResultModal,setShowResultModal]=useState<boolean>(false);const{questions,setQuestions,quizDetails,result,setResult,setCurrentScreen,timer,setTimer,setEndTime}=useQuiz();const currentQuestion=questions[activeQuestion];const{question,type,choices,image,correctAnswers}=currentQuestion;const onClickNext=()=>{const isMatch:boolean=selectedAnswer.length===correctAnswers.length&&selectedAnswer.every((answer)=>correctAnswers.includes(answer));setResult([...result,{...currentQuestion,selectedAnswer,isMatch}]);if(activeQuestion!==questions.length-1){setActiveQuestion((prev)=>prev+1)}else{const timeTaken=quizDetails.totalTime-timer;setEndTime(timeTaken);setShowResultModal(true)}setSelectedAnswer([])};const handleAnswerSelection=(e:React.ChangeEvent<HTMLInputElement>)=>{const{name,checked}=e.target;if(type==="MAQs"){if(selectedAnswer.includes(name)){setSelectedAnswer((prevSelectedAnswer)=>prevSelectedAnswer.filter((element)=>element!==name))}else{setSelectedAnswer((prevSelectedAnswer)=>[...prevSelectedAnswer,name])}}if(type==="MCQs"||type==="boolean"){if(checked){setSelectedAnswer([name])}}};const onClickPrevious=()=>{if(activeQuestion>0){setActiveQuestion(activeQuestion-1)}};const handleSkipQuestion=()=>{const filterQuestion=questions.filter((item)=>item.question!==currentQuestion.question);setQuestions([...filterQuestion,{...currentQuestion,skipped:true}]);setSelectedAnswer([])};const handleModal=()=>{setCurrentScreen(ScreenTypes.ResultScreen);document.body.style.overflow="auto"};useEffect(()=>{if(showTimerModal||showResultModal){document.body.style.overflow="hidden"}},[showTimerModal,showResultModal]);useTimer(timer,quizDetails,setEndTime,setTimer,setShowTimerModal,showResultModal);return(<PageCenter><LogoContainer><AppLogo/></LogoContainer><QuizContainerselectedAnswer={selectedAnswer.length>0}><QuizHeader
          activeQuestion={activeQuestion}
          totalQuestions={quizDetails.totalQuestions}
          timer={timer}
          skipped={currentQuestion?.skipped}
        /><Question question={question}image={image}choices={choices}type={type}handleAnswerSelection={handleAnswerSelection}selectedAnswer={selectedAnswer}/><ButtonWrapper><Button text={"Previous"}onClick={onClickPrevious}icon={<Previous/>}iconPosition="left"disabled={activeQuestion===0}/>{!currentQuestion?.skipped&&(<Button text="Skip"onClick={handleSkipQuestion}outline/>)}<Button text={activeQuestion===questions.length-1?"Finish":"Next"}onClick={onClickNext}icon={<Next/>}iconPosition="right"disabled={selectedAnswer.length===0}/></ButtonWrapper></QuizContainer>
      {/*timer or finish quiz modal*/}
      {(showTimerModal || showResultModal) && (
        <ModalWrapper
          title={showResultModal ? "Done!" : "Your time is up!"}
          subtitle={`You have attempted ${result.length} questions in total.`}
          onClick={handleModal}
          icon={showResultModal ? <CheckIcon /> : <TimerIcon/>};buttonTitle="SHOW RESULT";/>
      )}
    </PageCenter>)};export default QuestionScreen;
@file: PROJECT-ROOT-FOLDER/src/components/ResultScreen/ResultOverview/index.tsx
import{FC}from'react';import styled from'styled-components';import{useQuiz}from'../../../context/QuizContext';import{device}from'../../../styles/BreakPoints';import{HighlightedText}from'../../../styles/Global';import{convertSeconds}from'../../../utils/helpers';import{Result}from'../../../types';const ResultOverviewStyle=styled.div`
  text-align: center;
  margin-bottom: 70px;
  @media ${device.md} {
    margin-bottom: 30px;
  }
  p {
    margin-top: 15px;
    font-weight: 500;
    font-size: 18px;
  }
`;interface ResultOverviewProps{result:Result[]}const ResultOverview:FC<ResultOverviewProps>=({result})=>{const{quizDetails,endTime}=useQuiz();const totalQuestionAttempted=result.length;return(<ResultOverviewStyle><p>You attempted questions:{' '}<HighlightedText>{totalQuestionAttempted}</HighlightedText>/{' '}{quizDetails.totalQuestions}</p>
      <p>
        Time Spent:<HighlightedText> {convertSeconds(endTime)} </HighlightedText></p></ResultOverviewStyle>
  )
}
export default ResultOverview
@file: PROJECT-ROOT-FOLDER/src/components/ResultScreen/index.tsx
import{FC}from'react';import styled,{css}from'styled-components';import{AppLogo,Refresh}from'../../config/icons';import{useQuiz}from'../../context/QuizContext';import{device}from'../../styles/BreakPoints';import{Flex,LogoContainer,ResizableBox}from'../../styles/Global';import{refreshPage}from'../../utils/helpers';import Button from'../ui/Button';import QuizImage from'../ui/QuizImage';import ResultOverview from'./ResultOverview';import RightAnswer from'./RightAnswer';const ResultScreenContainer=styled.div`
  max-width: 900px;
  margin: 60px auto;
  @media ${device.md} {
    width: 90%;
    margin: 30px auto;
    padding-top: 40px;
  }
`;const InnerContainer=styled.div`
  background: ${({theme})=>theme.colors.cardBackground};
  border-radius: 4px;
  margin: 0 auto;
  margin-bottom: 40px;
  padding: 40px 90px 90px 90px;
  @media ${device.md} {
    padding: 15px;
  }
`;const QuestionContainer=styled.div`
  display: flex;
  justify-content: space-between;
  margin-top: 40px;
  @media ${device.md} {
    flex-direction: column;
  }
`;const QuestionNumber=styled.h6`
  font-size: clamp(16px, 5vw, 24px);
  font-weight: 500;
  line-height: 1.3;
  color: ${({theme})=>theme.colors.primaryText};
`;const QuestionStyle=styled.span`
  font-size: clamp(16px, 5vw, 24px);
  font-weight: 500;
  line-height: 1.3;
  color: ${({theme})=>theme.colors.primaryText};
  margin-bottom: 20px;
  @media ${device.md} {
    margin-bottom: 10px;
  }
`;interface AnswerProps{correct? :boolean wrong? :boolean}const Answer=styled.li<AnswerProps>`
  border: 1px solid ${({theme})=>theme.colors.border};
  width: 90%;
  @media ${device.md} {
    width: 100%;
  }
  background: ${({theme})=>theme.colors.answerBg};
  border-radius: 16px;
  font-size: clamp(16px, 5vw, 18px);
  font-weight: 600;
  padding: 15px;
  color: ${({theme})=>theme.colors.secondaryText};
  margin-top: clamp(13px, calc(10px + 6 * ((100vw - 600px) / 1320)), 16px);

  // if user answer matches to correct answer make answer background success color otherwise danger color
  ${({correct})=>correct&&css`
      border: 1px solid ${({theme})=>theme.colors.success};
      background-color: ${({theme})=>theme.colors.successLight};
    `}

  ${({wrong})=>wrong&&css`
      border: 1px solid ${({theme})=>theme.colors.danger};
      background-color: ${({theme})=>theme.colors.dangerLight};
    `}

  span {
    margin-right: 14px;
  }

  @media ${device.md} {
    font-weight: 400;
  }
`;const ResultScreen:FC=()=>{const{result}=useQuiz();const onClickRetry=()=>{refreshPage()}return(<ResultScreenContainer><LogoContainer><AppLogo/></LogoContainer><InnerContainer><ResultOverview result={result} />{result.map(({question,choices,image,correctAnswers,selectedAnswer,isMatch},index:number)=>{return(<QuestionContainerkey={question}><ResizableBox width="90%"><Flex gap="4px"><QuestionNumber>{`${index+1}. `}</QuestionNumber>
                    <QuestionStyle>{question}</QuestionStyle></Flex><div>{image&&<QuizImage image={image} />}<ul>{choices.map((ans:string,index:number)=>{const label=String.fromCharCode(65+index);const correct=selectedAnswer.includes(ans)&&correctAnswers.includes(ans);const wrong=selectedAnswer.includes(ans)&&!correctAnswers.includes(ans);return(<Answerkey={ans}correct={correct}wrong={wrong}><span>{label}.</span>
                            {ans}
                          </Answer>)})}</ul>
                    {/*only show ifthe answer is wrong*/}
                    {!isMatch && (
                      <RightAnswer correctAnswers={correctAnswers} choices={choices} />)}</div>
                </ResizableBox></QuestionContainer>;)};)}</InnerContainer>
      <Flex flxEnd>
        <Button
          text="RETRY"
          onClick={onClickRetry}
          icon={<Refresh />}iconPosition="left";bold;/>
      </Flex></ResultScreenContainer>;)};export default ResultScreen;
@file: PROJECT-ROOT-FOLDER/src/components/ResultScreen/RightAnswer/index.tsx
import{FC}from'react';import styled from'styled-components';import{HighlightedText}from'../../../styles/Global';interface RightAnswerProps{correctAnswers:string[];choices:string[]}const RightAnswerContainer=styled.p`
  font-size: 18px;
  font-weight: 400;
  color: ${({theme})=>theme.colors.darkerGray};
  margin-top: 15px;
  line-height: 1.2;
`;const RightAnswer:FC<RightAnswerProps>=({correctAnswers,choices})=>{return(<RightAnswerContainer>{`Right ${correctAnswers.length<2?'Answer':'Answers'}: `}{correctAnswers.map((item:string,index:number)=>{const label=String.fromCharCode(65+choices.indexOf(item));return(<HighlightedText key={index}themeText>{`${label} (${item})${index!==correctAnswers.length-1?', ':''}`}</HighlightedText>
        )
      })}
    </RightAnswerContainer>)}export default RightAnswer











