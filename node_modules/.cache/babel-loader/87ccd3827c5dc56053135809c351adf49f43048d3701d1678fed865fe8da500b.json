{"ast":null,"code":"export const addLeadingZero = number => {\n  if (number > 9) {\n    return number;\n  } else {\n    return '0' + number;\n  }\n};\n\n// utility function to format the remaining time as minutes:seconds\nexport function formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n}\nexport const convertSeconds = seconds => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const remainingSeconds = seconds % 60;\n  const hourString = hours > 0 ? `${hours} hour${hours > 1 ? 's' : ''}` : '';\n  const minuteString = minutes > 0 ? `${minutes} minute${minutes > 1 ? 's' : ''}` : '';\n  const secondString = remainingSeconds > 0 ? `${remainingSeconds} second${remainingSeconds > 1 ? 's' : ''}` : '';\n  if (hours > 0) {\n    return `${hourString} : ${minuteString || '0 minute'} ${secondString && `: ${secondString}`}`;\n  } else if (!hours && minutes > 0) {\n    return `${minuteString} ${secondString && `: ${secondString}`}`;\n  }\n  return secondString;\n};\nexport const refreshPage = () => {\n  window.location.reload();\n};\nexport const shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n\n    // Swap elements using array destructuring\n    ;\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};","map":{"version":3,"names":["addLeadingZero","number","formatTime","time","minutes","Math","floor","seconds","toString","padStart","convertSeconds","hours","remainingSeconds","hourString","minuteString","secondString","refreshPage","window","location","reload","shuffleArray","array","shuffledArray","i","length","j","random"],"sources":["/Users/jason/Sites/cotf-trivia/src/utils/helpers.ts"],"sourcesContent":["export const addLeadingZero = (number: number) => {\r\n  if (number > 9) {\r\n    return number\r\n  } else {\r\n    return '0' + number\r\n  }\r\n}\r\n\r\n// utility function to format the remaining time as minutes:seconds\r\nexport function formatTime(time: number) {\r\n  const minutes = Math.floor(time / 60)\r\n  const seconds = time % 60\r\n  return `${minutes}:${seconds.toString().padStart(2, '0')}`\r\n}\r\n\r\nexport const convertSeconds = (seconds: number): string => {\r\n  const hours = Math.floor(seconds / 3600)\r\n  const minutes = Math.floor((seconds % 3600) / 60)\r\n  const remainingSeconds = seconds % 60\r\n\r\n  const hourString = hours > 0 ? `${hours} hour${hours > 1 ? 's' : ''}` : ''\r\n  const minuteString = minutes > 0 ? `${minutes} minute${minutes > 1 ? 's' : ''}` : ''\r\n  const secondString =\r\n    remainingSeconds > 0\r\n      ? `${remainingSeconds} second${remainingSeconds > 1 ? 's' : ''}`\r\n      : ''\r\n\r\n  if (hours > 0) {\r\n    return `${hourString} : ${minuteString || '0 minute'} ${\r\n      secondString && `: ${secondString}`\r\n    }`\r\n  } else if (!hours && minutes > 0) {\r\n    return `${minuteString} ${secondString && `: ${secondString}`}`\r\n  }\r\n\r\n  return secondString\r\n}\r\n\r\nexport const refreshPage = (): void => {\r\n  window.location.reload()\r\n}\r\n\r\nexport const shuffleArray = <T>(array: T[]): T[] => {\r\n  const shuffledArray = [...array]\r\n\r\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n\r\n    // Swap elements using array destructuring\r\n    ;[shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]]\r\n  }\r\n\r\n  return shuffledArray\r\n}\r\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,MAAc,IAAK;EAChD,IAAIA,MAAM,GAAG,CAAC,EAAE;IACd,OAAOA,MAAM;EACf,CAAC,MAAM;IACL,OAAO,GAAG,GAAGA,MAAM;EACrB;AACF,CAAC;;AAED;AACA,OAAO,SAASC,UAAU,CAACC,IAAY,EAAE;EACvC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,EAAE,CAAC;EACrC,MAAMI,OAAO,GAAGJ,IAAI,GAAG,EAAE;EACzB,OAAQ,GAAEC,OAAQ,IAAGG,OAAO,CAACC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;AAC5D;AAEA,OAAO,MAAMC,cAAc,GAAIH,OAAe,IAAa;EACzD,MAAMI,KAAK,GAAGN,IAAI,CAACC,KAAK,CAACC,OAAO,GAAG,IAAI,CAAC;EACxC,MAAMH,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEC,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;EACjD,MAAMK,gBAAgB,GAAGL,OAAO,GAAG,EAAE;EAErC,MAAMM,UAAU,GAAGF,KAAK,GAAG,CAAC,GAAI,GAAEA,KAAM,QAAOA,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAG,EAAC,GAAG,EAAE;EAC1E,MAAMG,YAAY,GAAGV,OAAO,GAAG,CAAC,GAAI,GAAEA,OAAQ,UAASA,OAAO,GAAG,CAAC,GAAG,GAAG,GAAG,EAAG,EAAC,GAAG,EAAE;EACpF,MAAMW,YAAY,GAChBH,gBAAgB,GAAG,CAAC,GACf,GAAEA,gBAAiB,UAASA,gBAAgB,GAAG,CAAC,GAAG,GAAG,GAAG,EAAG,EAAC,GAC9D,EAAE;EAER,IAAID,KAAK,GAAG,CAAC,EAAE;IACb,OAAQ,GAAEE,UAAW,MAAKC,YAAY,IAAI,UAAW,IACnDC,YAAY,IAAK,KAAIA,YAAa,EACnC,EAAC;EACJ,CAAC,MAAM,IAAI,CAACJ,KAAK,IAAIP,OAAO,GAAG,CAAC,EAAE;IAChC,OAAQ,GAAEU,YAAa,IAAGC,YAAY,IAAK,KAAIA,YAAa,EAAE,EAAC;EACjE;EAEA,OAAOA,YAAY;AACrB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAY;EACrCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;AAC1B,CAAC;AAED,OAAO,MAAMC,YAAY,GAAOC,KAAU,IAAU;EAClD,MAAMC,aAAa,GAAG,CAAC,GAAGD,KAAK,CAAC;EAEhC,KAAK,IAAIE,CAAC,GAAGD,aAAa,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjD,MAAME,CAAC,GAAGpB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACqB,MAAM,EAAE,IAAIH,CAAC,GAAG,CAAC,CAAC;;IAE5C;IAAA;IACC,CAACD,aAAa,CAACC,CAAC,CAAC,EAAED,aAAa,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,aAAa,CAACG,CAAC,CAAC,EAAEH,aAAa,CAACC,CAAC,CAAC,CAAC;EAC9E;EAEA,OAAOD,aAAa;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}