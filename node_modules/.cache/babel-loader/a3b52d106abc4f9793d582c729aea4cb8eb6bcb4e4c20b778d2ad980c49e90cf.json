{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Sites/cotf-trivia/src/components/QuestionScreen/index.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { AppLogo, CheckIcon, Next, TimerIcon } from '../../config/icons';\nimport { useQuiz } from '../../context/QuizContext';\nimport { useTimer } from '../../hooks';\nimport { device } from '../../styles/BreakPoints';\nimport { PageCenter } from '../../styles/Global';\nimport { ScreenTypes } from '../../types';\nimport Button from '../ui/Button';\nimport ModalWrapper from '../ui/ModalWrapper';\nimport Question from './Question';\nimport QuizHeader from './QuizHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizContainer = styled.div`\n  width: 900px;\n  min-height: 500px;\n  background: ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.colors.cardBackground;\n}};\n  border-radius: 4px;\n  padding: 30px 60px 80px 60px;\n  margin-bottom: 70px;\n  position: relative;\n  @media ${device.md} {\n    width: 100%;\n    padding: 15px 15px 80px 15px;\n  }\n  button {\n    span {\n      svg {\n        path {\n          fill: ${_ref2 => {\n  let {\n    selectedAnswer,\n    theme\n  } = _ref2;\n  return selectedAnswer ? `${theme.colors.buttonText}` : `${theme.colors.darkGray}`;\n}};\n        }\n      }\n    }\n  }\n`;\n_c = QuizContainer;\nconst LogoContainer = styled.div`\n  margin-top: 50px;\n  margin-bottom: 50px;\n  @media ${device.md} {\n    margin-top: 10px;\n    margin-bottom: 20px;\n    svg {\n      width: 185px;\n      height: 80px;\n    }\n  }\n`;\n_c2 = LogoContainer;\nconst ButtonWrapper = styled.div`\n  position: absolute;\n  right: 60px;\n  bottom: 30px;\n  display: flex;\n  gap: 20px;\n  @media ${device.sm} {\n    justify-content: flex-end;\n    width: 90%;\n    right: 15px;\n  }\n`;\n_c3 = ButtonWrapper;\nconst QuestionScreen = () => {\n  _s();\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState([]);\n  const [showTimerModal, setShowTimerModal] = useState(false);\n  const [showResultModal, setShowResultModal] = useState(false);\n  const {\n    questions,\n    setQuestions,\n    quizDetails,\n    result,\n    setResult,\n    setCurrentScreen,\n    timer,\n    setTimer,\n    setEndTime\n  } = useQuiz();\n  const currentQuestion = questions[activeQuestion];\n  const {\n    question,\n    type,\n    choices,\n    code,\n    image,\n    correctAnswers\n  } = currentQuestion;\n  const onClickNext = () => {\n    const isMatch = selectedAnswer.length === correctAnswers.length && selectedAnswer.every(answer => correctAnswers.includes(answer));\n\n    // adding selected answer, and if answer matches key to result array with current question\n    setResult([...result, {\n      ...currentQuestion,\n      selectedAnswer,\n      isMatch\n    }]);\n    if (activeQuestion !== questions.length - 1) {\n      setActiveQuestion(prev => prev + 1);\n    } else {\n      // how long does it take to finish the quiz\n      const timeTaken = quizDetails.totalTime - timer;\n      setEndTime(timeTaken);\n      setShowResultModal(true);\n    }\n    setSelectedAnswer([]);\n  };\n  const handleAnswerSelection = e => {\n    const {\n      name,\n      checked\n    } = e.target;\n    if (type === 'MAQs') {\n      if (selectedAnswer.includes(name)) {\n        setSelectedAnswer(prevSelectedAnswer => prevSelectedAnswer.filter(element => element !== name));\n      } else {\n        setSelectedAnswer(prevSelectedAnswer => [...prevSelectedAnswer, name]);\n      }\n    }\n    if (type === 'MCQs' || type === 'boolean') {\n      if (checked) {\n        setSelectedAnswer([name]);\n      }\n    }\n  };\n  const handleSkipQuestion = () => {\n    const filterQuestion = questions.filter(item => item.question !== currentQuestion.question);\n\n    // in case of skip question add current questions to the end of questions array, with skipped key\n    setQuestions([...filterQuestion, {\n      ...currentQuestion,\n      skipped: true\n    }]);\n    setSelectedAnswer([]);\n  };\n  const handleModal = () => {\n    setCurrentScreen(ScreenTypes.ResultScreen);\n    document.body.style.overflow = 'auto';\n  };\n\n  // to prevent scrolling when modal is opened\n  useEffect(() => {\n    if (showTimerModal || showResultModal) {\n      document.body.style.overflow = 'hidden';\n    }\n  }, [showTimerModal, showResultModal]);\n\n  // timer hooks, handle conditions related to time\n  useTimer(timer, quizDetails, setEndTime, setTimer, setShowTimerModal, showResultModal);\n  return /*#__PURE__*/_jsxDEV(PageCenter, {\n    children: [/*#__PURE__*/_jsxDEV(LogoContainer, {\n      children: /*#__PURE__*/_jsxDEV(AppLogo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuizContainer, {\n      selectedAnswer: selectedAnswer.length > 0,\n      children: [/*#__PURE__*/_jsxDEV(QuizHeader, {\n        activeQuestion: activeQuestion,\n        totalQuestions: quizDetails.totalQuestions,\n        timer: timer,\n        skipped: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.skipped\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        question: question,\n        code: code,\n        image: image,\n        choices: choices,\n        type: type,\n        handleAnswerSelection: handleAnswerSelection,\n        selectedAnswer: selectedAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        children: [!(currentQuestion !== null && currentQuestion !== void 0 && currentQuestion.skipped) && /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Skip\",\n          onClick: handleSkipQuestion,\n          outline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: activeQuestion === questions.length - 1 ? 'Finish' : 'Next',\n          onClick: onClickNext,\n          icon: /*#__PURE__*/_jsxDEV(Next, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 19\n          }, this),\n          iconPosition: \"right\",\n          disabled: selectedAnswer.length === 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), (showTimerModal || showResultModal) && /*#__PURE__*/_jsxDEV(ModalWrapper, {\n      title: showResultModal ? 'Done!' : 'Your time is up!',\n      subtitle: `You have attempted ${result.length} questions in total.`,\n      onClick: handleModal,\n      icon: showResultModal ? /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(TimerIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 51\n      }, this),\n      buttonTitle: \"SHOW RESULT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionScreen, \"RsZijOYdNVN6fTsUVVY8qSErlDY=\", false, function () {\n  return [useQuiz, useTimer];\n});\n_c4 = QuestionScreen;\nexport default QuestionScreen;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"QuizContainer\");\n$RefreshReg$(_c2, \"LogoContainer\");\n$RefreshReg$(_c3, \"ButtonWrapper\");\n$RefreshReg$(_c4, \"QuestionScreen\");","map":{"version":3,"names":["useEffect","useState","styled","AppLogo","CheckIcon","Next","TimerIcon","useQuiz","useTimer","device","PageCenter","ScreenTypes","Button","ModalWrapper","Question","QuizHeader","QuizContainer","div","theme","colors","cardBackground","md","selectedAnswer","buttonText","darkGray","LogoContainer","ButtonWrapper","sm","QuestionScreen","activeQuestion","setActiveQuestion","setSelectedAnswer","showTimerModal","setShowTimerModal","showResultModal","setShowResultModal","questions","setQuestions","quizDetails","result","setResult","setCurrentScreen","timer","setTimer","setEndTime","currentQuestion","question","type","choices","code","image","correctAnswers","onClickNext","isMatch","length","every","answer","includes","prev","timeTaken","totalTime","handleAnswerSelection","e","name","checked","target","prevSelectedAnswer","filter","element","handleSkipQuestion","filterQuestion","item","skipped","handleModal","ResultScreen","document","body","style","overflow","totalQuestions"],"sources":["/Users/jason/Sites/cotf-trivia/src/components/QuestionScreen/index.tsx"],"sourcesContent":["import { FC, useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { AppLogo, CheckIcon, Next, TimerIcon } from '../../config/icons'\r\nimport { useQuiz } from '../../context/QuizContext'\r\nimport { useTimer } from '../../hooks'\r\nimport { device } from '../../styles/BreakPoints'\r\nimport { PageCenter } from '../../styles/Global'\r\nimport { ScreenTypes } from '../../types'\r\n\r\nimport Button from '../ui/Button'\r\nimport ModalWrapper from '../ui/ModalWrapper'\r\nimport Question from './Question'\r\nimport QuizHeader from './QuizHeader'\r\n\r\nconst QuizContainer = styled.div<{ selectedAnswer: boolean }>`\r\n  width: 900px;\r\n  min-height: 500px;\r\n  background: ${({ theme }) => theme.colors.cardBackground};\r\n  border-radius: 4px;\r\n  padding: 30px 60px 80px 60px;\r\n  margin-bottom: 70px;\r\n  position: relative;\r\n  @media ${device.md} {\r\n    width: 100%;\r\n    padding: 15px 15px 80px 15px;\r\n  }\r\n  button {\r\n    span {\r\n      svg {\r\n        path {\r\n          fill: ${({ selectedAnswer, theme }) =>\r\n            selectedAnswer ? `${theme.colors.buttonText}` : `${theme.colors.darkGray}`};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst LogoContainer = styled.div`\r\n  margin-top: 50px;\r\n  margin-bottom: 50px;\r\n  @media ${device.md} {\r\n    margin-top: 10px;\r\n    margin-bottom: 20px;\r\n    svg {\r\n      width: 185px;\r\n      height: 80px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ButtonWrapper = styled.div`\r\n  position: absolute;\r\n  right: 60px;\r\n  bottom: 30px;\r\n  display: flex;\r\n  gap: 20px;\r\n  @media ${device.sm} {\r\n    justify-content: flex-end;\r\n    width: 90%;\r\n    right: 15px;\r\n  }\r\n`\r\n\r\nconst QuestionScreen: FC = () => {\r\n  const [activeQuestion, setActiveQuestion] = useState<number>(0)\r\n  const [selectedAnswer, setSelectedAnswer] = useState<string[]>([])\r\n  const [showTimerModal, setShowTimerModal] = useState<boolean>(false)\r\n  const [showResultModal, setShowResultModal] = useState<boolean>(false)\r\n\r\n  const {\r\n    questions,\r\n    setQuestions,\r\n    quizDetails,\r\n    result,\r\n    setResult,\r\n    setCurrentScreen,\r\n    timer,\r\n    setTimer,\r\n    setEndTime,\r\n  } = useQuiz()\r\n\r\n  const currentQuestion = questions[activeQuestion]\r\n\r\n  const { question, type, choices, code, image, correctAnswers } = currentQuestion\r\n\r\n  const onClickNext = () => {\r\n    const isMatch: boolean =\r\n      selectedAnswer.length === correctAnswers.length &&\r\n      selectedAnswer.every((answer) => correctAnswers.includes(answer))\r\n\r\n    // adding selected answer, and if answer matches key to result array with current question\r\n    setResult([...result, { ...currentQuestion, selectedAnswer, isMatch }])\r\n\r\n    if (activeQuestion !== questions.length - 1) {\r\n      setActiveQuestion((prev) => prev + 1)\r\n    } else {\r\n      // how long does it take to finish the quiz\r\n      const timeTaken = quizDetails.totalTime - timer\r\n      setEndTime(timeTaken)\r\n      setShowResultModal(true)\r\n    }\r\n    setSelectedAnswer([])\r\n  }\r\n\r\n  const handleAnswerSelection = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, checked } = e.target\r\n\r\n    if (type === 'MAQs') {\r\n      if (selectedAnswer.includes(name)) {\r\n        setSelectedAnswer((prevSelectedAnswer) =>\r\n          prevSelectedAnswer.filter((element) => element !== name)\r\n        )\r\n      } else {\r\n        setSelectedAnswer((prevSelectedAnswer) => [...prevSelectedAnswer, name])\r\n      }\r\n    }\r\n\r\n    if (type === 'MCQs' || type === 'boolean') {\r\n      if (checked) {\r\n        setSelectedAnswer([name])\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSkipQuestion = () => {\r\n    const filterQuestion = questions.filter(\r\n      (item) => item.question !== currentQuestion.question\r\n    )\r\n\r\n    // in case of skip question add current questions to the end of questions array, with skipped key\r\n    setQuestions([...filterQuestion, { ...currentQuestion, skipped: true }])\r\n    setSelectedAnswer([])\r\n  }\r\n\r\n  const handleModal = () => {\r\n    setCurrentScreen(ScreenTypes.ResultScreen)\r\n    document.body.style.overflow = 'auto'\r\n  }\r\n\r\n  // to prevent scrolling when modal is opened\r\n  useEffect(() => {\r\n    if (showTimerModal || showResultModal) {\r\n      document.body.style.overflow = 'hidden'\r\n    }\r\n  }, [showTimerModal, showResultModal])\r\n\r\n  // timer hooks, handle conditions related to time\r\n  useTimer(timer, quizDetails, setEndTime, setTimer, setShowTimerModal, showResultModal)\r\n\r\n  return (\r\n    <PageCenter>\r\n      <LogoContainer>\r\n        <AppLogo />\r\n      </LogoContainer>\r\n      <QuizContainer selectedAnswer={selectedAnswer.length > 0}>\r\n        <QuizHeader\r\n          activeQuestion={activeQuestion}\r\n          totalQuestions={quizDetails.totalQuestions}\r\n          timer={timer}\r\n          skipped={currentQuestion?.skipped}\r\n        />\r\n        <Question\r\n          question={question}\r\n          code={code}\r\n          image={image}\r\n          choices={choices}\r\n          type={type}\r\n          handleAnswerSelection={handleAnswerSelection}\r\n          selectedAnswer={selectedAnswer}\r\n        />\r\n        <ButtonWrapper>\r\n          {!currentQuestion?.skipped && (\r\n            <Button text=\"Skip\" onClick={handleSkipQuestion} outline />\r\n          )}\r\n          <Button\r\n            text={activeQuestion === questions.length - 1 ? 'Finish' : 'Next'}\r\n            onClick={onClickNext}\r\n            icon={<Next />}\r\n            iconPosition=\"right\"\r\n            disabled={selectedAnswer.length === 0}\r\n          />\r\n        </ButtonWrapper>\r\n      </QuizContainer>\r\n      {/* timer or finish quiz modal*/}\r\n      {(showTimerModal || showResultModal) && (\r\n        <ModalWrapper\r\n          title={showResultModal ? 'Done!' : 'Your time is up!'}\r\n          subtitle={`You have attempted ${result.length} questions in total.`}\r\n          onClick={handleModal}\r\n          icon={showResultModal ? <CheckIcon /> : <TimerIcon />}\r\n          buttonTitle=\"SHOW RESULT\"\r\n        />\r\n      )}\r\n    </PageCenter>\r\n  )\r\n}\r\n\r\nexport default QuestionScreen\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}