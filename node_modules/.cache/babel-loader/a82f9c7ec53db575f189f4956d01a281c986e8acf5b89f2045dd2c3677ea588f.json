{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Sites/reactjs-quiz-app/src/context/QuizContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { quiz } from '../data/QuizQuestions';\nimport { ScreenTypes } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentScreen: ScreenTypes.SplashScreen,\n  setCurrentScreen: () => {},\n  quizTopic: 'Coheed and Cambria',\n  selectQuizTopic: () => {},\n  questions: [],\n  setQuestions: () => {},\n  result: [],\n  setResult: () => {},\n  timer: 15,\n  setTimer: () => {},\n  endTime: 0,\n  setEndTime: () => {},\n  quizDetails: {\n    totalQuestions: 0,\n    totalScore: 0,\n    totalTime: 0,\n    selectedQuizTopic: 'Coheed and Cambria'\n  }\n};\nexport const QuizContext = /*#__PURE__*/createContext(initialState);\nexport function useQuiz() {\n  _s();\n  return useContext(QuizContext);\n}\n_s(useQuiz, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst QuizProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [timer, setTimer] = useState(initialState.timer);\n  const [endTime, setEndTime] = useState(initialState.endTime);\n  const [quizTopic, setQuizTopic] = useState(initialState.quizTopic);\n  const [result, setResult] = useState(initialState.result);\n  const [currentScreen, setCurrentScreen] = useState(initialState.currentScreen);\n  const [questions, setQuestions] = useState(quiz[initialState.quizTopic].questions);\n  const {\n    questions: quizQuestions,\n    totalQuestions,\n    totalTime,\n    totalScore\n  } = quiz[quizTopic];\n  const selectQuizTopic = topic => {\n    setQuizTopic(topic);\n  };\n  useEffect(() => {\n    setTimer(totalTime);\n    setQuestions(quizQuestions);\n  }, [quizTopic]);\n  const quizDetails = {\n    totalQuestions,\n    totalScore,\n    totalTime,\n    selectedQuizTopic: quizTopic\n  };\n  const quizContextValue = {\n    currentScreen,\n    setCurrentScreen,\n    quizTopic,\n    selectQuizTopic,\n    questions,\n    setQuestions,\n    result,\n    setResult,\n    quizDetails,\n    timer,\n    setTimer,\n    endTime,\n    setEndTime\n  };\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: quizContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s2(QuizProvider, \"lA/Z/nfd4+t8eMR5N/Ii4Wqq3Bs=\");\n_c = QuizProvider;\nexport default QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","quiz","ScreenTypes","initialState","currentScreen","SplashScreen","setCurrentScreen","quizTopic","selectQuizTopic","questions","setQuestions","result","setResult","timer","setTimer","endTime","setEndTime","quizDetails","totalQuestions","totalScore","totalTime","selectedQuizTopic","QuizContext","useQuiz","QuizProvider","children","setQuizTopic","quizQuestions","topic","quizContextValue"],"sources":["/Users/jason/Sites/reactjs-quiz-app/src/context/QuizContext.tsx"],"sourcesContent":["import { ReactNode, createContext, useContext, useEffect, useState } from 'react'\r\n\r\nimport { quiz } from '../data/QuizQuestions'\r\nimport { QuizContextTypes, Result, ScreenTypes } from '../types'\r\n\r\nconst initialState: QuizContextTypes = {\r\n  currentScreen: ScreenTypes.SplashScreen,\r\n  setCurrentScreen: () => {},\r\n  quizTopic: 'Coheed and Cambria',\r\n  selectQuizTopic: () => {},\r\n  questions: [],\r\n  setQuestions: () => {},\r\n  result: [],\r\n  setResult: () => {},\r\n  timer: 15,\r\n  setTimer: () => {},\r\n  endTime: 0,\r\n  setEndTime: () => {},\r\n  quizDetails: {\r\n    totalQuestions: 0,\r\n    totalScore: 0,\r\n    totalTime: 0,\r\n    selectedQuizTopic: 'Coheed and Cambria',\r\n  },\r\n}\r\n\r\nexport const QuizContext = createContext<QuizContextTypes>(initialState)\r\n\r\nexport function useQuiz() {\r\n  return useContext(QuizContext)\r\n}\r\n\r\ntype QuizProviderProps = {\r\n  children: ReactNode\r\n}\r\n\r\nconst QuizProvider = ({ children }: QuizProviderProps) => {\r\n  const [timer, setTimer] = useState<number>(initialState.timer)\r\n  const [endTime, setEndTime] = useState<number>(initialState.endTime)\r\n  const [quizTopic, setQuizTopic] = useState<string>(initialState.quizTopic)\r\n  const [result, setResult] = useState<Result[]>(initialState.result)\r\n  const [currentScreen, setCurrentScreen] = useState<ScreenTypes>(\r\n    initialState.currentScreen\r\n  )\r\n\r\n  const [questions, setQuestions] = useState(quiz[initialState.quizTopic].questions)\r\n\r\n  const {\r\n    questions: quizQuestions,\r\n    totalQuestions,\r\n    totalTime,\r\n    totalScore,\r\n  } = quiz[quizTopic]\r\n\r\n  const selectQuizTopic = (topic: string) => {\r\n    setQuizTopic(topic)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTimer(totalTime)\r\n    setQuestions(quizQuestions)\r\n  }, [quizTopic])\r\n\r\n  const quizDetails = {\r\n    totalQuestions,\r\n    totalScore,\r\n    totalTime,\r\n    selectedQuizTopic: quizTopic,\r\n  }\r\n\r\n  const quizContextValue: QuizContextTypes = {\r\n    currentScreen,\r\n    setCurrentScreen,\r\n    quizTopic,\r\n    selectQuizTopic,\r\n    questions,\r\n    setQuestions,\r\n    result,\r\n    setResult,\r\n    quizDetails,\r\n    timer,\r\n    setTimer,\r\n    endTime,\r\n    setEndTime,\r\n  }\r\n\r\n  return <QuizContext.Provider value={quizContextValue}>{children}</QuizContext.Provider>\r\n}\r\n\r\nexport default QuizProvider\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}