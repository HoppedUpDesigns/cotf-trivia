{"ast":null,"code":"export let ScreenTypes;\n(function (ScreenTypes) {\n  ScreenTypes[ScreenTypes[\"SplashScreen\"] = 0] = \"SplashScreen\";\n  ScreenTypes[ScreenTypes[\"QuizTopicsScreen\"] = 1] = \"QuizTopicsScreen\";\n  ScreenTypes[ScreenTypes[\"QuizDetailsScreen\"] = 2] = \"QuizDetailsScreen\";\n  ScreenTypes[ScreenTypes[\"QuestionScreen\"] = 3] = \"QuestionScreen\";\n  ScreenTypes[ScreenTypes[\"ResultScreen\"] = 4] = \"ResultScreen\";\n})(ScreenTypes || (ScreenTypes = {}));","map":{"version":3,"names":["ScreenTypes"],"sources":["/Users/jason/Sites/cotf-trivia/src/types/index.ts"],"sourcesContent":["import { Dispatch, SetStateAction } from 'react'\r\nimport { Question } from '../data/QuizQuestions'\r\n\r\nexport enum ScreenTypes {\r\n  SplashScreen,\r\n  QuizTopicsScreen,\r\n  QuizDetailsScreen,\r\n  QuestionScreen,\r\n  ResultScreen,\r\n}\r\n\r\nexport interface QuestionTypes extends Question {\r\n  skipped?: boolean\r\n}\r\n\r\nexport interface Result extends Question {\r\n  selectedAnswer: string[]\r\n  isMatch: boolean\r\n  skipped?: boolean\r\n}\r\n\r\nexport type QuizContextTypes = {\r\n  currentScreen: ScreenTypes\r\n  setCurrentScreen: Dispatch<SetStateAction<ScreenTypes>>\r\n  quizTopic: string\r\n  selectQuizTopic: (type: string) => void\r\n  questions: QuestionTypes[]\r\n  setQuestions: Dispatch<SetStateAction<any[]>>\r\n  result: Result[]\r\n  setResult: Dispatch<SetStateAction<any[]>>\r\n  timer: number\r\n  setTimer: Dispatch<SetStateAction<number>>\r\n  endTime: number\r\n  setEndTime: (type: number) => void\r\n  quizDetails: {\r\n    totalQuestions: number\r\n    totalScore: number\r\n    totalTime: number\r\n    selectedQuizTopic: string\r\n  }\r\n}\r\n"],"mappings":"AAGA,WAAYA,WAAW;AAMtB,WANWA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;AAAA,GAAXA,WAAW,KAAXA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}